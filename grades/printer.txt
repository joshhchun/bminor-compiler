=====STUDENT TESTS=====
====Good Tests====
===[STUDENT TESTS/good1.bminor Input]===
/* A program is a sequence of declarations */
/* Try a variety of variable declarations. */

n: integer;
m: integer = 20;

b: boolean;
c: boolean = true;
s: string;
t: string = "hello\n";
d: char;
e: char = 'x';

x: array [] string;
y: array [] string = { "a", "b", "c" };
z: array [] array [] string = { {"a","b","c"}, {"x","y","z"} };

g: array [3] string;
h: array [3] string = { "a", "b", "c" };
i: array [2] array [3] string = { {"a","b","c"}, {"x","y","z"} };

===[STUDENT TESTS/good1.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good1.bminor Output]===
Program scanned successfully.
Program parsed successfully.
n: integer;
m: integer = 20;
b: boolean;
c: boolean = true;
s: string;
t: string = "hello\n";
d: char;
e: char = ';
x: array [] string;
y: array [] string = "a";
z: array [] array [] string = "a";
g: array [3] string;
h: array [3] string = "a";
i: array [2] array [3] string = "a";




===[STUDENT TESTS/good10.bminor Input]===

/* Try accesssing arrays of various sizes; */

a: array [10] integer = {100,200,300,400,500,600,700,800,900};
b: array [10] integer;
c: array [10] array [10] integer;

testfunc: function void () = {
    i: integer;
    j: integer;

    for(i=0;i<10;i++) {
        b[i] = a[i] * 10;
    }

    for(i=0;i<5;i++) {
        b[i*2] = a[i] + b[i];
    }

    for(j=0;j<10;i++) {
        for(i=0;i<10;i++) {
            c[i][j] = i*j;
        }
    }

    for(j=0;j<10;i++) {
        for(i=0;i<10;i++) {
            print c[i][j];
            print " ";
        }
        print "\n";
    }
}


===[STUDENT TESTS/good10.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good10.bminor Output]===
Program scanned successfully.
Program parsed successfully.
a: array [10] integer = 100;
b: array [10] integer;
c: array [10] array [10] integer;
testfunc: function void (  ) = {
    i: integer;
    j: integer;
    for (i=0;i<10;i++)    {
        b[i][i]=a[i][i]*10}
    for (i=0;i<5;i++)    {
        b[i*2][i*2]=a[i][i]+b[i][i]}
    for (j=0;j<10;i++)    {
        for (i=0;i<10;i++)        {
            c[i][i][i]=i*j}
}
    for (j=0;j<10;i++)    {
        for (i=0;i<10;i++)        {
            print c[i][i][i];
            print " ";
}
        print "\n";
}
}




===[STUDENT TESTS/good11.bminor Input]===

/* Try locally declared array lengths */


testfunc: function void (x: integer, y: integer) = {
    i: integer;
    j: integer;

    a: array [10] integer = {100,200,300,400,500,600,700,800,900};
    b: array [x] integer;
    c: array [x] array [y] integer;

    for(i=0;i<10;i++) {
        b[i] = a[i] * 10;
    }

    for(i=0;i<5;i++) {
        b[i*2] = a[i] + b[i];
    }

    for(j=0;j<10;i++) {
        for(i=0;i<10;i++) {
            c[i][j] = i*j;
        }
    }

    for(j=0;j<10;i++) {
        for(i=0;i<10;i++) {
            print c[i][j];
            print " ";
        }
        print "\n";
    }
}



===[STUDENT TESTS/good11.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good11.bminor Output]===
Program scanned successfully.
Program parsed successfully.
testfunc: function void ( x: integer, y: integer ) = {
    i: integer;
    j: integer;
    a: array [10] integer = 100;
    b: array [x] integer;
    c: array [x] array [y] integer;
    for (i=0;i<10;i++)    {
        b[i][i]=a[i][i]*10}
    for (i=0;i<5;i++)    {
        b[i*2][i*2]=a[i][i]+b[i][i]}
    for (j=0;j<10;i++)    {
        for (i=0;i<10;i++)        {
            c[i][i][i]=i*j}
}
    for (j=0;j<10;i++)    {
        for (i=0;i<10;i++)        {
            print c[i][i][i];
            print " ";
}
        print "\n";
}
}




===[STUDENT TESTS/good12.bminor Input]===

/* single statement ifs */

x: integer = 65;
s: string = "hello";
b: boolean = false;

min: function integer ( a: integer, b: integer ) =
{
	if(a > b) return a;
	else return b;
}

testfunc: function void ( z: integer ) =
{
	print "minimum", min(10, 5), "\n";
}



===[STUDENT TESTS/good12.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good12.bminor Output]===
Program scanned successfully.
Program parsed successfully.
x: integer = 65;
s: string = "hello";
b: boolean = false;
min: function integer ( a: integer, b: integer ) = {
    if (a>b)    return a;
else     return b;
}
testfunc: function void ( z: integer ) = {
    print "minimum";
}




===[STUDENT TESTS/good13.bminor Input]===
/* string format expr */

x: integer = 65;
s: string = "hello";
b: boolean = false;

min: function integer ( a: integer, b: integer ) =
{
	if(a > b) return a;
	else return b;
}

testfunc: function void ( z: integer ) =
{
	print "minimum", min(10, 5), "\n", z=10, z==10;
}



===[STUDENT TESTS/good13.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good13.bminor Output]===
Program scanned successfully.
Program parsed successfully.
x: integer = 65;
s: string = "hello";
b: boolean = false;
min: function integer ( a: integer, b: integer ) = {
    if (a>b)    return a;
else     return b;
}
testfunc: function void ( z: integer ) = {
    print "minimum";
}




===[STUDENT TESTS/good14.bminor Input]===

/* returning various expressions */

testfunc: function void ( x: integer, y:integer, z:integer ) = {
	return x;
	return "hello";
	return x = 10;
	return x == 10;
	return x > 5;
	return testfunc(x, y, z);
}



===[STUDENT TESTS/good14.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good14.bminor Output]===
Program scanned successfully.
Program parsed successfully.
testfunc: function void ( x: integer, y: integer, z: integer ) = {
    return x;
    return "hello";
    return x=10;
    return x==10;
    return x>5;
    return testfunc(x, y);
}




===[STUDENT TESTS/good15.bminor Input]===


/* code blocks */

testfunc: function void ( x: integer, y:integer, z:integer ) = {
	{
		return x;
		return "hello";
		return x = 10;
	}
	{
		return x == 10;
		{
			return x > 5;
			return testfunc(x, y, z);
		}
	}
}



===[STUDENT TESTS/good15.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good15.bminor Output]===
Program scanned successfully.
Program parsed successfully.
testfunc: function void ( x: integer, y: integer, z: integer ) = {
    {
        return x;
        return "hello";
        return x=10;
}
    {
        return x==10;
        {
            return x>5;
            return testfunc(x, y);
}
}
}




===[STUDENT TESTS/good16.bminor Input]===
x: integer = 3;

===[STUDENT TESTS/good16.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good16.bminor Output]===
Program scanned successfully.
Program parsed successfully.
x: integer = 3;




===[STUDENT TESTS/good17.bminor Input]===
y: float = 3.2;

===[STUDENT TESTS/good17.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good17.bminor Output]===
Program scanned successfully.
Program parsed successfully.
y: float = 3.200000;




===[STUDENT TESTS/good18.bminor Input]===
main: function integer () = {
    x: integer = 3;
}

===[STUDENT TESTS/good18.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good18.bminor Output]===
Program scanned successfully.
Program parsed successfully.
main: function integer (  ) = {
    x: integer = 3;
}




===[STUDENT TESTS/good19.bminor Input]===
printarray: function void ( a: array [] integer ) = {
	i: integer;
	for( i=0;i<array_length(a);i++) {
		print a[i], "\n";
	}
}


===[STUDENT TESTS/good19.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good19.bminor Output]===
Program scanned successfully.
Program parsed successfully.
printarray: function void ( a: array [] integer ) = {
    i: integer;
    for (i=0;i<array_length(a);i++)    {
        print a[i][i];
}
}




===[STUDENT TESTS/good2.bminor Input]===
/* Function prototypes are declarations without bodies. */

ComputeAscii: function char ( c: char );

GetLength: function integer ( s: string, i: integer );

/* Function body has some code in it */

GetArea: function integer ( width: integer, height: integer ) =
{
	return width * height;
}



===[STUDENT TESTS/good2.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good2.bminor Output]===
Program scanned successfully.
Program parsed successfully.
ComputeAscii: function char ( c: char );
GetLength: function integer ( s: string, i: integer );
GetArea: function integer ( width: integer, height: integer ) = {
    return width*height;
}




===[STUDENT TESTS/good3.bminor Input]===
/* A function contains a sequence of statements */
/* Some of those statements can be decls */

simplefunc: function void () = {
     x: integer;
     y: integer = 20;
     s: string = "hello world";
}



===[STUDENT TESTS/good3.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good3.bminor Output]===
Program scanned successfully.
Program parsed successfully.
simplefunc: function void (  ) = {
    x: integer;
    y: integer = 20;
    s: string = "hello world";
}




===[STUDENT TESTS/good4.bminor Input]===
/* A function contains a sequence of statements */
/* Try decls and stmts and exprs together. */

simplefunc: function boolean ( x: integer, y: integer ) = {

     // A declaration
     z: integer = x * y;

     // An expression with a semicolon
     z = 16 + x / y;

     // Print statement
     print "input is: ", x, " and ", y, "\n";

     // Simple if-else statement
     if( x < y ) {
         return true;
     } else {
         return false;
     }

}



===[STUDENT TESTS/good4.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good4.bminor Output]===
Program scanned successfully.
Program parsed successfully.
simplefunc: function boolean ( x: integer, y: integer ) = {
    z: integer = x*y;
    z=16+x/y    print "input is: ";
    if (x<y)    {
        return true;
}
else     {
        return false;
}
}




===[STUDENT TESTS/good5.bminor Input]===
/* A function contains a sequence of statements */
/* Try decls and stmts and exprs together. */
/* Add some float */

simplefunc: function boolean ( x: integer, y: integer ) = {

     // A declaration
     z: integer = x * y;

     // A float declaration
     q: float = 10e9;

     // another float
     v: float = 2.10e2;

     // a float operation
     return v;

}



===[STUDENT TESTS/good5.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good5.bminor Output]===
Program scanned successfully.
Program parsed successfully.
simplefunc: function boolean ( x: integer, y: integer ) = {
    z: integer = x*y;
    q: float = 10000000000.000000;
    v: float = 210.000000;
    return v;
}




===[STUDENT TESTS/good6.bminor Input]===
/* Try several variations of for-loops */

simplefunc: function void (r: integer, s: integer, t: integer ) = {

    i: integer;

    for( i=0; i<r; i++ ) {
        print i,"\n";
    }

    i=0;
    for( ; i<s; i++ ) {
        print i,"\n";
    }

    i=0;
    for( ; i<r; ) {
        print i,"\n";
        i++;
    }

    for(;;) print "forever!\n";
}



===[STUDENT TESTS/good6.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good6.bminor Output]===
Program scanned successfully.
Program parsed successfully.
simplefunc: function void ( r: integer, s: integer, t: integer ) = {
    i: integer;
    for (i=0;i<r;i++)    {
        print i;
}
    i=0    for (;i<s;i++)    {
        print i;
}
    i=0    for (;i<r;)    {
        print i;
        i++}
    for (;;)    print "forever!\n";
}




===[STUDENT TESTS/good7.bminor Input]===
/* Test various nestings of if-else statements */

testit: function boolean ( x: integer, y: integer ) = {

	/* If statement without braces */
	if( x<y ) print "less\n"; else print "low\n";

	/* If statement with braces */
	if( x<y ) { print "less\n"; } else { print "low\n"; }

	/* This statement should print nothing */
        if(20<10) if(10<20) print "incorrect!"; else print "dangling else!";

	/* statements and decls inside of if-else */

        if( x>y ) {
              i: integer;
              for(i=0;i<x;i++) print i, "\n";
        } else {
              i: integer;
              for(i=0;i<y;i++) print i, "\n";
        }

	/* A decl can come after a few statements */
	i: integer;

	/* try the other way around */
	for(i=0;i<x;i++) {
              if( i<x ) print "small"; else print "large";
        }

        return true;
}



===[STUDENT TESTS/good7.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good7.bminor Output]===
Program scanned successfully.
Program parsed successfully.
testit: function boolean ( x: integer, y: integer ) = {
    if (x<y)    print "less\n";
else     print "low\n";
    if (x<y)    {
        print "less\n";
}
else     {
        print "low\n";
}
    if (20<10)    if (10<20)    print "incorrect!";
else     print "dangling else!";
    if (x>y)    {
        i: integer;
        for (i=0;i<x;i++)        print i;
}
else     {
        i: integer;
        for (i=0;i<y;i++)        print i;
}
    i: integer;
    for (i=0;i<x;i++)    {
        if (i<x)        print "small";
else         print "large";
}
    return true;
}




===[STUDENT TESTS/good8.bminor Input]===
/* Now try some expressions */

x: integer = 65;
s: string = "hello";
b: boolean = false;

min: function integer ( a: integer, b: integer ) =
{
	if( a<b ) return a; else return b;
}

testfunc: function void ( z: integer ) =
{
	// Nested integer operators.
	y: integer = x*(x*10 + 55%6 + z/10);
	print "y: ", y, "\n";

	// Nested boolean operations.
	c: boolean = ( x<100 && y>200 ) || !(b=true);
	print "c: ", c, "\n";

	// Boolean operations on strings?
	d: boolean = (s == "goodbye");
	print "d: ", d, "\n";

	// Can we stack up assignments?
	z = y = x;

	a: array [100] integer;

	// Function calls and array accesses:
	y = min(a[10],a[20]);
}



===[STUDENT TESTS/good8.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good8.bminor Output]===
Program scanned successfully.
Program parsed successfully.
x: integer = 65;
s: string = "hello";
b: boolean = false;
min: function integer ( a: integer, b: integer ) = {
    if (a<b)    return a;
else     return b;
}
testfunc: function void ( z: integer ) = {
    y: integer = x*x*10+55%6+z/10;
    print "y: ";
    c: boolean = x<100&&y>200||!b=true;
    print "c: ";
    d: boolean = s=="goodbye";
    print "d: ";
    z=y=x    a: array [100] integer;
    y=min(a[10][10], a[20][20])}




===[STUDENT TESTS/good9.bminor Input]===
/* Check for minimum use of parentheses. */

testfunc: function void ( x: integer, y:integer, z:integer ) = {

          r: integer;
	  b: boolean;

          // Parens required
	  r = (x+y)/z;
	  r = x+(y+z);
	  b = (true||false) && (false||true);

          // Parens not required
	  r = x+(y/z);
	  r = (x+y)+z;
	  b = (x+y) < (x+z);
	  b = (true&&false) || (false&&true);

}



===[STUDENT TESTS/good9.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good9.bminor Output]===
Program scanned successfully.
Program parsed successfully.
testfunc: function void ( x: integer, y: integer, z: integer ) = {
    r: integer;
    b: boolean;
    r=x+y/z    r=x+y+z    b=true||false&&false||true    r=x+y/z    r=x+y+z    b=x+y<x+z    b=true&&false||false&&true}




====Bad Tests====
=====HIDDEN TESTS=====
====Good Tests====
===[HIDDEN TESTS/good1.bminor Input]===
/* A program is a sequence of declarations */
/* Try a variety of variable declarations. */

n: integer;
m: integer = 20;

b: boolean;
c: boolean = false;
s: string;
t: string = "world\n";
d: char;
e: char = 'x';

f: float = 1.23;

x: array [] string;
y: array [] string = { "a", "b", "c" };
z: array [] array [] string = { {"a","b","c"}, {"x","y","z"} };

g: array [3] string;
h: array [3] string = { "a", "b", "c" };
i: array [2] array [3] string = { {"a","b","c"}, {"x","y","z"} };

===[HIDDEN TESTS/good1.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good1.bminor Output]===
Program scanned successfully.
Program parsed successfully.
n: integer;
m: integer = 20;
b: boolean;
c: boolean = false;
s: string;
t: string = "world\n";
d: char;
e: char = ';
f: float = 1.230000;
x: array [] string;
y: array [] string = "a";
z: array [] array [] string = "a";
g: array [3] string;
h: array [3] string = "a";
i: array [2] array [3] string = "a";




===[HIDDEN TESTS/good10.bminor Input]===
/* Try accesssing arrays of various sizes; */

a: array [10] integer = {100,200,300,400,500,600,700,800,900};
b: array [10] integer;
c: array [10] array [10] integer;

testfunc: function void () = {
    i: integer;
    j: integer;

    for(i=0;i<10;i++) {
        b[i] = a[i] * 10;
    }

    for(i=0;i<5;i++) {
        b[i*2] = a[i] + b[i];
    }

    for(j=0;j<10;i++) {
        for(i=0;i<10;i++) {
            c[i][j] = i*j;
        }
    }

    for(j=0;j<10;i++) {
        for(i=0;i<10;i++) {
            print c[i][j];
            print " ";
        }
        print "\n";
    }
}

===[HIDDEN TESTS/good10.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good10.bminor Output]===
Program scanned successfully.
Program parsed successfully.
a: array [10] integer = 100;
b: array [10] integer;
c: array [10] array [10] integer;
testfunc: function void (  ) = {
    i: integer;
    j: integer;
    for (i=0;i<10;i++)    {
        b[i][i]=a[i][i]*10}
    for (i=0;i<5;i++)    {
        b[i*2][i*2]=a[i][i]+b[i][i]}
    for (j=0;j<10;i++)    {
        for (i=0;i<10;i++)        {
            c[i][i][i]=i*j}
}
    for (j=0;j<10;i++)    {
        for (i=0;i<10;i++)        {
            print c[i][i][i];
            print " ";
}
        print "\n";
}
}




===[HIDDEN TESTS/good2.bminor Input]===
/* Function prototypes are declarations without bodies. */

ComputeAscii: function char ( c: char );

GetLength: function integer ( s: string, i: integer );

/* Function body has some code in it */

GetArea: function integer ( width: float, height: float ) =
{
	return width * height;
}

===[HIDDEN TESTS/good2.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good2.bminor Output]===
Program scanned successfully.
Program parsed successfully.
ComputeAscii: function char ( c: char );
GetLength: function integer ( s: string, i: integer );
GetArea: function integer ( width: float, height: float ) = {
    return width*height;
}




===[HIDDEN TESTS/good3.bminor Input]===
/* A function contains a sequence of statements */
/* Some of those statements can be decls */

simplefunc: function void () = {
     x: integer;
     y: integer = 20;
     s: string = "hello world";
     f: float = 3.3e1;
}

===[HIDDEN TESTS/good3.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good3.bminor Output]===
Program scanned successfully.
Program parsed successfully.
simplefunc: function void (  ) = {
    x: integer;
    y: integer = 20;
    s: string = "hello world";
    f: float = 33.000000;
}




===[HIDDEN TESTS/good4.bminor Input]===
/* A function contains a sequence of statements */
/* Try decls and stmts and exprs together. */

simplefunc: function boolean ( x: integer, y: integer ) = {

     // A declaration
     z: integer = x * y;

     // An expression with a semicolon
     z = 16 - x / y;

     r: integer = x + (y + z);

     // Print statement
     print "input is: ", x, " and ", y, "\n";

     // Simple if-else statement
     if( x <= y ) {
         return true;
     } else {
         return false;
     }

}

===[HIDDEN TESTS/good4.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good4.bminor Output]===
Program scanned successfully.
Program parsed successfully.
simplefunc: function boolean ( x: integer, y: integer ) = {
    z: integer = x*y;
    z=-16    r: integer = x+y+z;
    print "input is: ";
    if (x<=y)    {
        return true;
}
else     {
        return false;
}
}




===[HIDDEN TESTS/good5.bminor Input]===
/* A function contains a sequence of statements */
/* Try decls and stmts and exprs together. */

simplefunc: function boolean ( x: integer, y: integer ) = {

     // A declaration
     z: integer = x * y;

     // An expression with a semicolon
     z = 16 + x / y;

     // Print statement
     print "input is: ", x, " and ", y, "\n";

     // Simple if-else statement
     if( x < y ) {
         return true;
     } else {
         return false;
     }

}

===[HIDDEN TESTS/good5.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good5.bminor Output]===
Program scanned successfully.
Program parsed successfully.
simplefunc: function boolean ( x: integer, y: integer ) = {
    z: integer = x*y;
    z=16+x/y    print "input is: ";
    if (x<y)    {
        return true;
}
else     {
        return false;
}
}




===[HIDDEN TESTS/good6.bminor Input]===
/* Try several variations of for-loops */

simplefunc: function void (r: integer, s: integer, t: integer ) = {

    i: integer;

    for( i=0; i<r; i++ ) {
        print i,"\n";
    }

    i=0;
    for( ; i<s; i++ ) {
        print i,"\n";
    }

    i=0;
    for( ; i<r; ) {
        print i,"\n";
        i++;
    }

    for(;;) print "forever!\n";
}

===[HIDDEN TESTS/good6.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good6.bminor Output]===
Program scanned successfully.
Program parsed successfully.
simplefunc: function void ( r: integer, s: integer, t: integer ) = {
    i: integer;
    for (i=0;i<r;i++)    {
        print i;
}
    i=0    for (;i<s;i++)    {
        print i;
}
    i=0    for (;i<r;)    {
        print i;
        i++}
    for (;;)    print "forever!\n";
}




===[HIDDEN TESTS/good7.bminor Input]===
/* Test various nestings of if-else statements */

testit: function boolean ( x: integer, y: integer ) = {

	/* If statement without braces */
	if( x<y ) print "less\n"; else print "low\n";

	/* If statement with braces */
	if( x<y ) { print "less\n"; } else { print "low\n"; }

	/* This statement should print nothing */
        if(20<10) if(10<20) print "incorrect!"; else print "dangling else!";

	/* statements and decls inside of if-else */

        if( x>y ) {
              i: integer;
              for(i=0;i<x;i++) print i, "\n";
        } else {
              i: integer;
              for(i=0;i<y;i++) print i, "\n";
        }

	/* A decl can come after a few statements */
	i: integer;

	/* try the other way around */
	for(i=0;i<x;i++) {
              if( i<x ) print "small"; else print "large";
        }

        return true;
}

===[HIDDEN TESTS/good7.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good7.bminor Output]===
Program scanned successfully.
Program parsed successfully.
testit: function boolean ( x: integer, y: integer ) = {
    if (x<y)    print "less\n";
else     print "low\n";
    if (x<y)    {
        print "less\n";
}
else     {
        print "low\n";
}
    if (20<10)    if (10<20)    print "incorrect!";
else     print "dangling else!";
    if (x>y)    {
        i: integer;
        for (i=0;i<x;i++)        print i;
}
else     {
        i: integer;
        for (i=0;i<y;i++)        print i;
}
    i: integer;
    for (i=0;i<x;i++)    {
        if (i<x)        print "small";
else         print "large";
}
    return true;
}




===[HIDDEN TESTS/good8.bminor Input]===
/* Now try some expressions */

x: integer = 65;
s: string = "hello";
b: boolean = false;

min: function integer ( a: integer, b: integer ) =
{
	if( a<b ) return a; else return b;
}

testfunc: function void ( z: integer ) =
{
	// Nested integer operators.
	y: integer = x*(x*10 + 55%6 + z/10);
	print "y: ", y, "\n";

	// Nested boolean operations.
	c: boolean = ( x<100 && y>200 ) || !(b=true);
	print "c: ", c, "\n";

	// Boolean operations on strings?
	d: boolean = (s == "goodbye");
	print "d: ", d, "\n";

	// Can we stack up assignments?
	z = y = x;

	a: array [100] integer;

	// Function calls and array accesses:
	y = min(a[10],a[20]);

	// float operations
	f: float = 3.4 + 5.6;
	g: float = 34.1e7 + 9.9e3;
}

===[HIDDEN TESTS/good8.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good8.bminor Output]===
Program scanned successfully.
Program parsed successfully.
x: integer = 65;
s: string = "hello";
b: boolean = false;
min: function integer ( a: integer, b: integer ) = {
    if (a<b)    return a;
else     return b;
}
testfunc: function void ( z: integer ) = {
    y: integer = x*x*10+55%6+z/10;
    print "y: ";
    c: boolean = x<100&&y>200||!b=true;
    print "c: ";
    d: boolean = s=="goodbye";
    print "d: ";
    z=y=x    a: array [100] integer;
    y=min(a[10][10], a[20][20])    f: float = 3.400000+5.600000;
    g: float = 341000000.000000+9900.000000;
}




===[HIDDEN TESTS/good9.bminor Input]===
/* Check for minimum use of parentheses. */

testfunc: function void ( x: integer, y:integer, z:integer ) = {

          r: integer;
	  b: boolean;

          // Parens required
	  r = (x+y)/z;
	  r = x+(y+z);
	  b = (true||false) && (false||true);

          // Parens not required
	  r = x+(y/z);
	  r = (x+y)+z;
	  b = (x+y) < (x+z);
	  b = (true&&false) || (false&&true);

}

===[HIDDEN TESTS/good9.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good9.bminor Output]===
Program scanned successfully.
Program parsed successfully.
testfunc: function void ( x: integer, y: integer, z: integer ) = {
    r: integer;
    b: boolean;
    r=x+y/z    r=x+y+z    b=true||false&&false||true    r=x+y/z    r=x+y+z    b=x+y<x+z    b=true&&false||false&&true}




====Bad Tests====
===== SUMMARIZED PRINTER RESULTS =====
{
  "student_tests": {
    "Good": {
      "correct": 19,
      "incorrect": 0
    }
  },
  "hidden_tests": {
    "Good": {
      "correct": 10,
      "incorrect": 0
    }
  }
}

Printer Project
---------------

General Structure (20/20 points)
----------------------------------------------
Program stucture checks out and looks well formed

Construction of the abstract syntax tree and coverage of all language elements (15/30 points)
----------------------------------------------

Indentation of Blocks (5 points)
Indentation is not quite consistent

Parentheses Display: (0 points)
Looks like you're missing all parentheses in expresisons

Spacing of Expressions: (10 points)
Expressions formatting appears to be correct

Student Tests (19/20 points)
------------------------------------------
Nice test coverage. -1 for a missing test

Hidden Tests (20/20 points)
------------------------------------------
Good work passing all of the hidden tests

Coding Style (10/10 points)
------------------------------------------
Coding style looks quite nice. Well done!

---------------
