Terminals which are not used

   TOKEN_MINUS
   TOKEN_MUL
   TOKEN_SEMI
   TOKEN_ERROR
   TOKEN_AUTO
   TOKEN_WHILE
   TOKEN_INEQ
   TOKEN_COMMENT


Grammar

    0 $accept: program $end

    1 program: decl_list TOKEN_EOF
    2        | TOKEN_EOF

    3 decl_list: decl_list decl
    4          | decl

    5 decl: var_decl
    6     | func_decl

    7 var_decl: TOKEN_IDENT TOKEN_DEFINE val_type init expr TOKEN_SEMICOLON
    8         | TOKEN_IDENT TOKEN_DEFINE val_type TOKEN_SEMICOLON
    9         | TOKEN_IDENT TOKEN_DEFINE array_type init TOKEN_LBRACE array_init TOKEN_RBRACE TOKEN_SEMICOLON
   10         | TOKEN_IDENT TOKEN_DEFINE array_type TOKEN_SEMICOLON

   11 func_decl: TOKEN_IDENT TOKEN_DEFINE TOKEN_FUNC return_type TOKEN_LPAREN param_list TOKEN_RPAREN TOKEN_SEMICOLON
   12          | TOKEN_IDENT TOKEN_DEFINE TOKEN_FUNC return_type TOKEN_LPAREN param_list TOKEN_RPAREN init TOKEN_LBRACE stmt_list TOKEN_RBRACE

   13 stmt_list: stmt_list stmt
   14          | /* empty */

   15 stmt: simp_stmt
   16     | cmpd_stmt

   17 simp_stmt: TOKEN_LBRACE stmt_list TOKEN_RBRACE
   18          | var_decl
   19          | TOKEN_RETURN expr TOKEN_SEMICOLON
   20          | TOKEN_RETURN TOKEN_SEMICOLON
   21          | TOKEN_PRINT opt_expr_list TOKEN_SEMICOLON
   22          | inc_or_dec TOKEN_SEMICOLON
   23          | expr_assign TOKEN_SEMICOLON
   24          | func_call TOKEN_SEMICOLON

   25 cmpd_stmt: if_expr stmt
   26          | if_expr if_dangle TOKEN_ELSE stmt
   27          | for_stmt reg_end

   28 if_dangle: if_expr if_dangle TOKEN_ELSE if_dangle
   29          | for_stmt dangle_end
   30          | simp_stmt

   31 if_expr: TOKEN_IF TOKEN_LPAREN expr TOKEN_RPAREN

   32 for_stmt: TOKEN_FOR for_cond

   33 for_cond: TOKEN_LPAREN for_expr TOKEN_SEMICOLON for_expr TOKEN_SEMICOLON for_expr TOKEN_RPAREN

   34 for_expr: expr
   35         | /* empty */

   36 dangle_end: TOKEN_SEMICOLON
   37           | if_dangle

   38 reg_end: TOKEN_SEMICOLON
   39        | stmt

   40 func_call: TOKEN_IDENT TOKEN_LPAREN opt_expr_list TOKEN_RPAREN

   41 array_init: TOKEN_LBRACE expr_list TOKEN_RBRACE array_init_next
   42           | expr_list

   43 array_init_next: TOKEN_COMMA TOKEN_LBRACE expr_list TOKEN_RBRACE array_init_next
   44                | /* empty */

   45 expr_list: expr expr_next

   46 opt_expr_list: expr_list
   47              | /* empty */

   48 expr_next: TOKEN_COMMA expr_list
   49          | /* empty */

   50 expr_assign: mut init expr

   51 expr: expr_assign
   52     | expr2

   53 expr2: expr2 TOKEN_OR expr3
   54      | expr3

   55 expr3: expr3 TOKEN_AND expr4
   56      | expr4

   57 expr4: expr4 TOKEN_EQ expr5
   58      | expr4 TOKEN_NOT TOKEN_EQ expr5
   59      | expr5

   60 expr5: expr5 TOKEN_LT expr6
   61      | expr5 TOKEN_GT expr6
   62      | expr5 TOKEN_LEQ expr6
   63      | expr5 TOKEN_GEQ expr6
   64      | expr6

   65 expr6: expr6 TOKEN_ADD expr7
   66      | expr6 TOKEN_NEG expr7
   67      | expr7

   68 expr7: expr7 TOKEN_MULT expr8
   69      | expr7 TOKEN_DIV expr8
   70      | expr7 TOKEN_MOD expr8
   71      | expr8

   72 expr8: TOKEN_NOT val_literal
   73      | TOKEN_NEG val_literal
   74      | TOKEN_PLUS val_literal
   75      | expr8 TOKEN_EXP val_literal
   76      | val_literal

   77 val_literal: TOKEN_INT_LITERAL
   78            | inc_or_dec
   79            | TOKEN_CHAR_LITERAL
   80            | TOKEN_FLOAT_LITERAL
   81            | TOKEN_STRING_LITERAL
   82            | TOKEN_TRUE
   83            | TOKEN_FALSE
   84            | func_call
   85            | TOKEN_LPAREN expr TOKEN_RPAREN
   86            | mut

   87 inc_or_dec: TOKEN_IDENT TOKEN_INC
   88           | TOKEN_IDENT TOKEN_DEC

   89 mut: TOKEN_IDENT
   90    | array_access

   91 array_access: TOKEN_IDENT TOKEN_LBRACKET expr TOKEN_RBRACKET array_access_next

   92 array_access_next: TOKEN_LBRACKET expr TOKEN_RBRACKET array_access_next
   93                  | /* empty */

   94 array_type: TOKEN_ARRAY TOKEN_LBRACKET array_size TOKEN_RBRACKET all_types

   95 array_size: expr
   96           | /* empty */

   97 all_types: val_type
   98          | array_type

   99 val_type: TOKEN_INT
  100         | TOKEN_FLOAT
  101         | TOKEN_BOOL
  102         | TOKEN_CHAR
  103         | TOKEN_STR

  104 return_type: val_type
  105            | TOKEN_VOID

  106 param_list: TOKEN_IDENT TOKEN_DEFINE all_types param_next
  107           | /* empty */

  108 param_next: TOKEN_COMMA TOKEN_IDENT TOKEN_DEFINE all_types param_next
  109           | /* empty */

  110 init: TOKEN_ASSIGN


Terminals, with rules where they appear

$end (0) 0
error (256)
TOKEN_INT (258) 99
TOKEN_PLUS (259) 74
TOKEN_MINUS (260)
TOKEN_MUL (261)
TOKEN_DIV (262) 69
TOKEN_LPAREN (263) 11 12 31 33 40 85
TOKEN_RPAREN (264) 11 12 31 33 40 85
TOKEN_SEMI (265)
TOKEN_ERROR (266)
TOKEN_EOF (267) 1 2
TOKEN_ARRAY (268) 94
TOKEN_AUTO (269)
TOKEN_BOOL (270) 101
TOKEN_CHAR (271) 102
TOKEN_ELSE (272) 26 28
TOKEN_FALSE (273) 83
TOKEN_FLOAT (274) 100
TOKEN_FOR (275) 32
TOKEN_FUNC (276) 11 12
TOKEN_IF (277) 31
TOKEN_PRINT (278) 21
TOKEN_RETURN (279) 19 20
TOKEN_STR (280) 103
TOKEN_TRUE (281) 82
TOKEN_VOID (282) 105
TOKEN_WHILE (283)
TOKEN_ASSIGN (284) 110
TOKEN_LBRACE (285) 9 12 17 41 43
TOKEN_RBRACE (286) 9 12 17 41 43
TOKEN_LBRACKET (287) 91 92 94
TOKEN_RBRACKET (288) 91 92 94
TOKEN_COMMA (289) 43 48 108
TOKEN_INC (290) 87
TOKEN_DEC (291) 88
TOKEN_ADD (292) 65
TOKEN_NEG (293) 66 73
TOKEN_MULT (294) 68
TOKEN_MOD (295) 70
TOKEN_EXP (296) 75
TOKEN_INEQ (297)
TOKEN_EQ (298) 57 58
TOKEN_NOT (299) 58 72
TOKEN_LT (300) 60
TOKEN_GT (301) 61
TOKEN_LEQ (302) 62
TOKEN_GEQ (303) 63
TOKEN_AND (304) 55
TOKEN_OR (305) 53
TOKEN_DEFINE (306) 7 8 9 10 11 12 106 108
TOKEN_SEMICOLON (307) 7 8 9 10 11 19 20 21 22 23 24 33 36 38
TOKEN_IDENT (308) 7 8 9 10 11 12 40 87 88 89 91 106 108
TOKEN_INT_LITERAL (309) 77
TOKEN_FLOAT_LITERAL (310) 80
TOKEN_STRING_LITERAL (311) 81
TOKEN_CHAR_LITERAL (312) 79
TOKEN_COMMENT (313)


Nonterminals, with rules where they appear

$accept (59)
    on left: 0
program (60)
    on left: 1 2, on right: 0
decl_list (61)
    on left: 3 4, on right: 1 3
decl (62)
    on left: 5 6, on right: 3 4
var_decl (63)
    on left: 7 8 9 10, on right: 5 18
func_decl (64)
    on left: 11 12, on right: 6
stmt_list (65)
    on left: 13 14, on right: 12 13 17
stmt (66)
    on left: 15 16, on right: 13 25 26 39
simp_stmt (67)
    on left: 17 18 19 20 21 22 23 24, on right: 15 30
cmpd_stmt (68)
    on left: 25 26 27, on right: 16
if_dangle (69)
    on left: 28 29 30, on right: 26 28 37
if_expr (70)
    on left: 31, on right: 25 26 28
for_stmt (71)
    on left: 32, on right: 27 29
for_cond (72)
    on left: 33, on right: 32
for_expr (73)
    on left: 34 35, on right: 33
dangle_end (74)
    on left: 36 37, on right: 29
reg_end (75)
    on left: 38 39, on right: 27
func_call (76)
    on left: 40, on right: 24 84
array_init (77)
    on left: 41 42, on right: 9
array_init_next (78)
    on left: 43 44, on right: 41 43
expr_list (79)
    on left: 45, on right: 41 42 43 46 48
opt_expr_list (80)
    on left: 46 47, on right: 21 40
expr_next (81)
    on left: 48 49, on right: 45
expr_assign (82)
    on left: 50, on right: 23 51
expr (83)
    on left: 51 52, on right: 7 19 31 34 45 50 85 91 92 95
expr2 (84)
    on left: 53 54, on right: 52 53
expr3 (85)
    on left: 55 56, on right: 53 54 55
expr4 (86)
    on left: 57 58 59, on right: 55 56 57 58
expr5 (87)
    on left: 60 61 62 63 64, on right: 57 58 59 60 61 62 63
expr6 (88)
    on left: 65 66 67, on right: 60 61 62 63 64 65 66
expr7 (89)
    on left: 68 69 70 71, on right: 65 66 67 68 69 70
expr8 (90)
    on left: 72 73 74 75 76, on right: 68 69 70 71 75
val_literal (91)
    on left: 77 78 79 80 81 82 83 84 85 86, on right: 72 73 74 75 76
inc_or_dec (92)
    on left: 87 88, on right: 22 78
mut (93)
    on left: 89 90, on right: 50 86
array_access (94)
    on left: 91, on right: 90
array_access_next (95)
    on left: 92 93, on right: 91 92
array_type (96)
    on left: 94, on right: 9 10 98
array_size (97)
    on left: 95 96, on right: 94
all_types (98)
    on left: 97 98, on right: 94 106 108
val_type (99)
    on left: 99 100 101 102 103, on right: 7 8 97 104
return_type (100)
    on left: 104 105, on right: 11 12
param_list (101)
    on left: 106 107, on right: 11 12
param_next (102)
    on left: 108 109, on right: 106 108
init (103)
    on left: 110, on right: 7 9 12 50


state 0

    0 $accept: . program $end

    TOKEN_EOF    shift, and go to state 1
    TOKEN_IDENT  shift, and go to state 2

    program    go to state 3
    decl_list  go to state 4
    decl       go to state 5
    var_decl   go to state 6
    func_decl  go to state 7


state 1

    2 program: TOKEN_EOF .

    $default  reduce using rule 2 (program)


state 2

    7 var_decl: TOKEN_IDENT . TOKEN_DEFINE val_type init expr TOKEN_SEMICOLON
    8         | TOKEN_IDENT . TOKEN_DEFINE val_type TOKEN_SEMICOLON
    9         | TOKEN_IDENT . TOKEN_DEFINE array_type init TOKEN_LBRACE array_init TOKEN_RBRACE TOKEN_SEMICOLON
   10         | TOKEN_IDENT . TOKEN_DEFINE array_type TOKEN_SEMICOLON
   11 func_decl: TOKEN_IDENT . TOKEN_DEFINE TOKEN_FUNC return_type TOKEN_LPAREN param_list TOKEN_RPAREN TOKEN_SEMICOLON
   12          | TOKEN_IDENT . TOKEN_DEFINE TOKEN_FUNC return_type TOKEN_LPAREN param_list TOKEN_RPAREN init TOKEN_LBRACE stmt_list TOKEN_RBRACE

    TOKEN_DEFINE  shift, and go to state 8


state 3

    0 $accept: program . $end

    $end  shift, and go to state 9


state 4

    1 program: decl_list . TOKEN_EOF
    3 decl_list: decl_list . decl

    TOKEN_EOF    shift, and go to state 10
    TOKEN_IDENT  shift, and go to state 2

    decl       go to state 11
    var_decl   go to state 6
    func_decl  go to state 7


state 5

    4 decl_list: decl .

    $default  reduce using rule 4 (decl_list)


state 6

    5 decl: var_decl .

    $default  reduce using rule 5 (decl)


state 7

    6 decl: func_decl .

    $default  reduce using rule 6 (decl)


state 8

    7 var_decl: TOKEN_IDENT TOKEN_DEFINE . val_type init expr TOKEN_SEMICOLON
    8         | TOKEN_IDENT TOKEN_DEFINE . val_type TOKEN_SEMICOLON
    9         | TOKEN_IDENT TOKEN_DEFINE . array_type init TOKEN_LBRACE array_init TOKEN_RBRACE TOKEN_SEMICOLON
   10         | TOKEN_IDENT TOKEN_DEFINE . array_type TOKEN_SEMICOLON
   11 func_decl: TOKEN_IDENT TOKEN_DEFINE . TOKEN_FUNC return_type TOKEN_LPAREN param_list TOKEN_RPAREN TOKEN_SEMICOLON
   12          | TOKEN_IDENT TOKEN_DEFINE . TOKEN_FUNC return_type TOKEN_LPAREN param_list TOKEN_RPAREN init TOKEN_LBRACE stmt_list TOKEN_RBRACE

    TOKEN_INT    shift, and go to state 12
    TOKEN_ARRAY  shift, and go to state 13
    TOKEN_BOOL   shift, and go to state 14
    TOKEN_CHAR   shift, and go to state 15
    TOKEN_FLOAT  shift, and go to state 16
    TOKEN_FUNC   shift, and go to state 17
    TOKEN_STR    shift, and go to state 18

    array_type  go to state 19
    val_type    go to state 20


state 9

    0 $accept: program $end .

    $default  accept


state 10

    1 program: decl_list TOKEN_EOF .

    $default  reduce using rule 1 (program)


state 11

    3 decl_list: decl_list decl .

    $default  reduce using rule 3 (decl_list)


state 12

   99 val_type: TOKEN_INT .

    $default  reduce using rule 99 (val_type)


state 13

   94 array_type: TOKEN_ARRAY . TOKEN_LBRACKET array_size TOKEN_RBRACKET all_types

    TOKEN_LBRACKET  shift, and go to state 21


state 14

  101 val_type: TOKEN_BOOL .

    $default  reduce using rule 101 (val_type)


state 15

  102 val_type: TOKEN_CHAR .

    $default  reduce using rule 102 (val_type)


state 16

  100 val_type: TOKEN_FLOAT .

    $default  reduce using rule 100 (val_type)


state 17

   11 func_decl: TOKEN_IDENT TOKEN_DEFINE TOKEN_FUNC . return_type TOKEN_LPAREN param_list TOKEN_RPAREN TOKEN_SEMICOLON
   12          | TOKEN_IDENT TOKEN_DEFINE TOKEN_FUNC . return_type TOKEN_LPAREN param_list TOKEN_RPAREN init TOKEN_LBRACE stmt_list TOKEN_RBRACE

    TOKEN_INT    shift, and go to state 12
    TOKEN_BOOL   shift, and go to state 14
    TOKEN_CHAR   shift, and go to state 15
    TOKEN_FLOAT  shift, and go to state 16
    TOKEN_STR    shift, and go to state 18
    TOKEN_VOID   shift, and go to state 22

    val_type     go to state 23
    return_type  go to state 24


state 18

  103 val_type: TOKEN_STR .

    $default  reduce using rule 103 (val_type)


state 19

    9 var_decl: TOKEN_IDENT TOKEN_DEFINE array_type . init TOKEN_LBRACE array_init TOKEN_RBRACE TOKEN_SEMICOLON
   10         | TOKEN_IDENT TOKEN_DEFINE array_type . TOKEN_SEMICOLON

    TOKEN_ASSIGN     shift, and go to state 25
    TOKEN_SEMICOLON  shift, and go to state 26

    init  go to state 27


state 20

    7 var_decl: TOKEN_IDENT TOKEN_DEFINE val_type . init expr TOKEN_SEMICOLON
    8         | TOKEN_IDENT TOKEN_DEFINE val_type . TOKEN_SEMICOLON

    TOKEN_ASSIGN     shift, and go to state 25
    TOKEN_SEMICOLON  shift, and go to state 28

    init  go to state 29


state 21

   94 array_type: TOKEN_ARRAY TOKEN_LBRACKET . array_size TOKEN_RBRACKET all_types

    TOKEN_PLUS            shift, and go to state 30
    TOKEN_LPAREN          shift, and go to state 31
    TOKEN_FALSE           shift, and go to state 32
    TOKEN_TRUE            shift, and go to state 33
    TOKEN_NEG             shift, and go to state 34
    TOKEN_NOT             shift, and go to state 35
    TOKEN_IDENT           shift, and go to state 36
    TOKEN_INT_LITERAL     shift, and go to state 37
    TOKEN_FLOAT_LITERAL   shift, and go to state 38
    TOKEN_STRING_LITERAL  shift, and go to state 39
    TOKEN_CHAR_LITERAL    shift, and go to state 40

    $default  reduce using rule 96 (array_size)

    func_call     go to state 41
    expr_assign   go to state 42
    expr          go to state 43
    expr2         go to state 44
    expr3         go to state 45
    expr4         go to state 46
    expr5         go to state 47
    expr6         go to state 48
    expr7         go to state 49
    expr8         go to state 50
    val_literal   go to state 51
    inc_or_dec    go to state 52
    mut           go to state 53
    array_access  go to state 54
    array_size    go to state 55


state 22

  105 return_type: TOKEN_VOID .

    $default  reduce using rule 105 (return_type)


state 23

  104 return_type: val_type .

    $default  reduce using rule 104 (return_type)


state 24

   11 func_decl: TOKEN_IDENT TOKEN_DEFINE TOKEN_FUNC return_type . TOKEN_LPAREN param_list TOKEN_RPAREN TOKEN_SEMICOLON
   12          | TOKEN_IDENT TOKEN_DEFINE TOKEN_FUNC return_type . TOKEN_LPAREN param_list TOKEN_RPAREN init TOKEN_LBRACE stmt_list TOKEN_RBRACE

    TOKEN_LPAREN  shift, and go to state 56


state 25

  110 init: TOKEN_ASSIGN .

    $default  reduce using rule 110 (init)


state 26

   10 var_decl: TOKEN_IDENT TOKEN_DEFINE array_type TOKEN_SEMICOLON .

    $default  reduce using rule 10 (var_decl)


state 27

    9 var_decl: TOKEN_IDENT TOKEN_DEFINE array_type init . TOKEN_LBRACE array_init TOKEN_RBRACE TOKEN_SEMICOLON

    TOKEN_LBRACE  shift, and go to state 57


state 28

    8 var_decl: TOKEN_IDENT TOKEN_DEFINE val_type TOKEN_SEMICOLON .

    $default  reduce using rule 8 (var_decl)


state 29

    7 var_decl: TOKEN_IDENT TOKEN_DEFINE val_type init . expr TOKEN_SEMICOLON

    TOKEN_PLUS            shift, and go to state 30
    TOKEN_LPAREN          shift, and go to state 31
    TOKEN_FALSE           shift, and go to state 32
    TOKEN_TRUE            shift, and go to state 33
    TOKEN_NEG             shift, and go to state 34
    TOKEN_NOT             shift, and go to state 35
    TOKEN_IDENT           shift, and go to state 36
    TOKEN_INT_LITERAL     shift, and go to state 37
    TOKEN_FLOAT_LITERAL   shift, and go to state 38
    TOKEN_STRING_LITERAL  shift, and go to state 39
    TOKEN_CHAR_LITERAL    shift, and go to state 40

    func_call     go to state 41
    expr_assign   go to state 42
    expr          go to state 58
    expr2         go to state 44
    expr3         go to state 45
    expr4         go to state 46
    expr5         go to state 47
    expr6         go to state 48
    expr7         go to state 49
    expr8         go to state 50
    val_literal   go to state 51
    inc_or_dec    go to state 52
    mut           go to state 53
    array_access  go to state 54


state 30

   74 expr8: TOKEN_PLUS . val_literal

    TOKEN_LPAREN          shift, and go to state 31
    TOKEN_FALSE           shift, and go to state 32
    TOKEN_TRUE            shift, and go to state 33
    TOKEN_IDENT           shift, and go to state 36
    TOKEN_INT_LITERAL     shift, and go to state 37
    TOKEN_FLOAT_LITERAL   shift, and go to state 38
    TOKEN_STRING_LITERAL  shift, and go to state 39
    TOKEN_CHAR_LITERAL    shift, and go to state 40

    func_call     go to state 41
    val_literal   go to state 59
    inc_or_dec    go to state 52
    mut           go to state 60
    array_access  go to state 54


state 31

   85 val_literal: TOKEN_LPAREN . expr TOKEN_RPAREN

    TOKEN_PLUS            shift, and go to state 30
    TOKEN_LPAREN          shift, and go to state 31
    TOKEN_FALSE           shift, and go to state 32
    TOKEN_TRUE            shift, and go to state 33
    TOKEN_NEG             shift, and go to state 34
    TOKEN_NOT             shift, and go to state 35
    TOKEN_IDENT           shift, and go to state 36
    TOKEN_INT_LITERAL     shift, and go to state 37
    TOKEN_FLOAT_LITERAL   shift, and go to state 38
    TOKEN_STRING_LITERAL  shift, and go to state 39
    TOKEN_CHAR_LITERAL    shift, and go to state 40

    func_call     go to state 41
    expr_assign   go to state 42
    expr          go to state 61
    expr2         go to state 44
    expr3         go to state 45
    expr4         go to state 46
    expr5         go to state 47
    expr6         go to state 48
    expr7         go to state 49
    expr8         go to state 50
    val_literal   go to state 51
    inc_or_dec    go to state 52
    mut           go to state 53
    array_access  go to state 54


state 32

   83 val_literal: TOKEN_FALSE .

    $default  reduce using rule 83 (val_literal)


state 33

   82 val_literal: TOKEN_TRUE .

    $default  reduce using rule 82 (val_literal)


state 34

   73 expr8: TOKEN_NEG . val_literal

    TOKEN_LPAREN          shift, and go to state 31
    TOKEN_FALSE           shift, and go to state 32
    TOKEN_TRUE            shift, and go to state 33
    TOKEN_IDENT           shift, and go to state 36
    TOKEN_INT_LITERAL     shift, and go to state 37
    TOKEN_FLOAT_LITERAL   shift, and go to state 38
    TOKEN_STRING_LITERAL  shift, and go to state 39
    TOKEN_CHAR_LITERAL    shift, and go to state 40

    func_call     go to state 41
    val_literal   go to state 62
    inc_or_dec    go to state 52
    mut           go to state 60
    array_access  go to state 54


state 35

   72 expr8: TOKEN_NOT . val_literal

    TOKEN_LPAREN          shift, and go to state 31
    TOKEN_FALSE           shift, and go to state 32
    TOKEN_TRUE            shift, and go to state 33
    TOKEN_IDENT           shift, and go to state 36
    TOKEN_INT_LITERAL     shift, and go to state 37
    TOKEN_FLOAT_LITERAL   shift, and go to state 38
    TOKEN_STRING_LITERAL  shift, and go to state 39
    TOKEN_CHAR_LITERAL    shift, and go to state 40

    func_call     go to state 41
    val_literal   go to state 63
    inc_or_dec    go to state 52
    mut           go to state 60
    array_access  go to state 54


state 36

   40 func_call: TOKEN_IDENT . TOKEN_LPAREN opt_expr_list TOKEN_RPAREN
   87 inc_or_dec: TOKEN_IDENT . TOKEN_INC
   88           | TOKEN_IDENT . TOKEN_DEC
   89 mut: TOKEN_IDENT .
   91 array_access: TOKEN_IDENT . TOKEN_LBRACKET expr TOKEN_RBRACKET array_access_next

    TOKEN_LPAREN    shift, and go to state 64
    TOKEN_LBRACKET  shift, and go to state 65
    TOKEN_INC       shift, and go to state 66
    TOKEN_DEC       shift, and go to state 67

    $default  reduce using rule 89 (mut)


state 37

   77 val_literal: TOKEN_INT_LITERAL .

    $default  reduce using rule 77 (val_literal)


state 38

   80 val_literal: TOKEN_FLOAT_LITERAL .

    $default  reduce using rule 80 (val_literal)


state 39

   81 val_literal: TOKEN_STRING_LITERAL .

    $default  reduce using rule 81 (val_literal)


state 40

   79 val_literal: TOKEN_CHAR_LITERAL .

    $default  reduce using rule 79 (val_literal)


state 41

   84 val_literal: func_call .

    $default  reduce using rule 84 (val_literal)


state 42

   51 expr: expr_assign .

    $default  reduce using rule 51 (expr)


state 43

   95 array_size: expr .

    $default  reduce using rule 95 (array_size)


state 44

   52 expr: expr2 .
   53 expr2: expr2 . TOKEN_OR expr3

    TOKEN_OR  shift, and go to state 68

    $default  reduce using rule 52 (expr)


state 45

   54 expr2: expr3 .
   55 expr3: expr3 . TOKEN_AND expr4

    TOKEN_AND  shift, and go to state 69

    $default  reduce using rule 54 (expr2)


state 46

   56 expr3: expr4 .
   57 expr4: expr4 . TOKEN_EQ expr5
   58      | expr4 . TOKEN_NOT TOKEN_EQ expr5

    TOKEN_EQ   shift, and go to state 70
    TOKEN_NOT  shift, and go to state 71

    $default  reduce using rule 56 (expr3)


state 47

   59 expr4: expr5 .
   60 expr5: expr5 . TOKEN_LT expr6
   61      | expr5 . TOKEN_GT expr6
   62      | expr5 . TOKEN_LEQ expr6
   63      | expr5 . TOKEN_GEQ expr6

    TOKEN_LT   shift, and go to state 72
    TOKEN_GT   shift, and go to state 73
    TOKEN_LEQ  shift, and go to state 74
    TOKEN_GEQ  shift, and go to state 75

    $default  reduce using rule 59 (expr4)


state 48

   64 expr5: expr6 .
   65 expr6: expr6 . TOKEN_ADD expr7
   66      | expr6 . TOKEN_NEG expr7

    TOKEN_ADD  shift, and go to state 76
    TOKEN_NEG  shift, and go to state 77

    $default  reduce using rule 64 (expr5)


state 49

   67 expr6: expr7 .
   68 expr7: expr7 . TOKEN_MULT expr8
   69      | expr7 . TOKEN_DIV expr8
   70      | expr7 . TOKEN_MOD expr8

    TOKEN_DIV   shift, and go to state 78
    TOKEN_MULT  shift, and go to state 79
    TOKEN_MOD   shift, and go to state 80

    $default  reduce using rule 67 (expr6)


state 50

   71 expr7: expr8 .
   75 expr8: expr8 . TOKEN_EXP val_literal

    TOKEN_EXP  shift, and go to state 81

    $default  reduce using rule 71 (expr7)


state 51

   76 expr8: val_literal .

    $default  reduce using rule 76 (expr8)


state 52

   78 val_literal: inc_or_dec .

    $default  reduce using rule 78 (val_literal)


state 53

   50 expr_assign: mut . init expr
   86 val_literal: mut .

    TOKEN_ASSIGN  shift, and go to state 25

    $default  reduce using rule 86 (val_literal)

    init  go to state 82


state 54

   90 mut: array_access .

    $default  reduce using rule 90 (mut)


state 55

   94 array_type: TOKEN_ARRAY TOKEN_LBRACKET array_size . TOKEN_RBRACKET all_types

    TOKEN_RBRACKET  shift, and go to state 83


state 56

   11 func_decl: TOKEN_IDENT TOKEN_DEFINE TOKEN_FUNC return_type TOKEN_LPAREN . param_list TOKEN_RPAREN TOKEN_SEMICOLON
   12          | TOKEN_IDENT TOKEN_DEFINE TOKEN_FUNC return_type TOKEN_LPAREN . param_list TOKEN_RPAREN init TOKEN_LBRACE stmt_list TOKEN_RBRACE

    TOKEN_IDENT  shift, and go to state 84

    $default  reduce using rule 107 (param_list)

    param_list  go to state 85


state 57

    9 var_decl: TOKEN_IDENT TOKEN_DEFINE array_type init TOKEN_LBRACE . array_init TOKEN_RBRACE TOKEN_SEMICOLON

    TOKEN_PLUS            shift, and go to state 30
    TOKEN_LPAREN          shift, and go to state 31
    TOKEN_FALSE           shift, and go to state 32
    TOKEN_TRUE            shift, and go to state 33
    TOKEN_LBRACE          shift, and go to state 86
    TOKEN_NEG             shift, and go to state 34
    TOKEN_NOT             shift, and go to state 35
    TOKEN_IDENT           shift, and go to state 36
    TOKEN_INT_LITERAL     shift, and go to state 37
    TOKEN_FLOAT_LITERAL   shift, and go to state 38
    TOKEN_STRING_LITERAL  shift, and go to state 39
    TOKEN_CHAR_LITERAL    shift, and go to state 40

    func_call     go to state 41
    array_init    go to state 87
    expr_list     go to state 88
    expr_assign   go to state 42
    expr          go to state 89
    expr2         go to state 44
    expr3         go to state 45
    expr4         go to state 46
    expr5         go to state 47
    expr6         go to state 48
    expr7         go to state 49
    expr8         go to state 50
    val_literal   go to state 51
    inc_or_dec    go to state 52
    mut           go to state 53
    array_access  go to state 54


state 58

    7 var_decl: TOKEN_IDENT TOKEN_DEFINE val_type init expr . TOKEN_SEMICOLON

    TOKEN_SEMICOLON  shift, and go to state 90


state 59

   74 expr8: TOKEN_PLUS val_literal .

    $default  reduce using rule 74 (expr8)


state 60

   86 val_literal: mut .

    $default  reduce using rule 86 (val_literal)


state 61

   85 val_literal: TOKEN_LPAREN expr . TOKEN_RPAREN

    TOKEN_RPAREN  shift, and go to state 91


state 62

   73 expr8: TOKEN_NEG val_literal .

    $default  reduce using rule 73 (expr8)


state 63

   72 expr8: TOKEN_NOT val_literal .

    $default  reduce using rule 72 (expr8)


state 64

   40 func_call: TOKEN_IDENT TOKEN_LPAREN . opt_expr_list TOKEN_RPAREN

    TOKEN_PLUS            shift, and go to state 30
    TOKEN_LPAREN          shift, and go to state 31
    TOKEN_FALSE           shift, and go to state 32
    TOKEN_TRUE            shift, and go to state 33
    TOKEN_NEG             shift, and go to state 34
    TOKEN_NOT             shift, and go to state 35
    TOKEN_IDENT           shift, and go to state 36
    TOKEN_INT_LITERAL     shift, and go to state 37
    TOKEN_FLOAT_LITERAL   shift, and go to state 38
    TOKEN_STRING_LITERAL  shift, and go to state 39
    TOKEN_CHAR_LITERAL    shift, and go to state 40

    $default  reduce using rule 47 (opt_expr_list)

    func_call      go to state 41
    expr_list      go to state 92
    opt_expr_list  go to state 93
    expr_assign    go to state 42
    expr           go to state 89
    expr2          go to state 44
    expr3          go to state 45
    expr4          go to state 46
    expr5          go to state 47
    expr6          go to state 48
    expr7          go to state 49
    expr8          go to state 50
    val_literal    go to state 51
    inc_or_dec     go to state 52
    mut            go to state 53
    array_access   go to state 54


state 65

   91 array_access: TOKEN_IDENT TOKEN_LBRACKET . expr TOKEN_RBRACKET array_access_next

    TOKEN_PLUS            shift, and go to state 30
    TOKEN_LPAREN          shift, and go to state 31
    TOKEN_FALSE           shift, and go to state 32
    TOKEN_TRUE            shift, and go to state 33
    TOKEN_NEG             shift, and go to state 34
    TOKEN_NOT             shift, and go to state 35
    TOKEN_IDENT           shift, and go to state 36
    TOKEN_INT_LITERAL     shift, and go to state 37
    TOKEN_FLOAT_LITERAL   shift, and go to state 38
    TOKEN_STRING_LITERAL  shift, and go to state 39
    TOKEN_CHAR_LITERAL    shift, and go to state 40

    func_call     go to state 41
    expr_assign   go to state 42
    expr          go to state 94
    expr2         go to state 44
    expr3         go to state 45
    expr4         go to state 46
    expr5         go to state 47
    expr6         go to state 48
    expr7         go to state 49
    expr8         go to state 50
    val_literal   go to state 51
    inc_or_dec    go to state 52
    mut           go to state 53
    array_access  go to state 54


state 66

   87 inc_or_dec: TOKEN_IDENT TOKEN_INC .

    $default  reduce using rule 87 (inc_or_dec)


state 67

   88 inc_or_dec: TOKEN_IDENT TOKEN_DEC .

    $default  reduce using rule 88 (inc_or_dec)


state 68

   53 expr2: expr2 TOKEN_OR . expr3

    TOKEN_PLUS            shift, and go to state 30
    TOKEN_LPAREN          shift, and go to state 31
    TOKEN_FALSE           shift, and go to state 32
    TOKEN_TRUE            shift, and go to state 33
    TOKEN_NEG             shift, and go to state 34
    TOKEN_NOT             shift, and go to state 35
    TOKEN_IDENT           shift, and go to state 36
    TOKEN_INT_LITERAL     shift, and go to state 37
    TOKEN_FLOAT_LITERAL   shift, and go to state 38
    TOKEN_STRING_LITERAL  shift, and go to state 39
    TOKEN_CHAR_LITERAL    shift, and go to state 40

    func_call     go to state 41
    expr3         go to state 95
    expr4         go to state 46
    expr5         go to state 47
    expr6         go to state 48
    expr7         go to state 49
    expr8         go to state 50
    val_literal   go to state 51
    inc_or_dec    go to state 52
    mut           go to state 60
    array_access  go to state 54


state 69

   55 expr3: expr3 TOKEN_AND . expr4

    TOKEN_PLUS            shift, and go to state 30
    TOKEN_LPAREN          shift, and go to state 31
    TOKEN_FALSE           shift, and go to state 32
    TOKEN_TRUE            shift, and go to state 33
    TOKEN_NEG             shift, and go to state 34
    TOKEN_NOT             shift, and go to state 35
    TOKEN_IDENT           shift, and go to state 36
    TOKEN_INT_LITERAL     shift, and go to state 37
    TOKEN_FLOAT_LITERAL   shift, and go to state 38
    TOKEN_STRING_LITERAL  shift, and go to state 39
    TOKEN_CHAR_LITERAL    shift, and go to state 40

    func_call     go to state 41
    expr4         go to state 96
    expr5         go to state 47
    expr6         go to state 48
    expr7         go to state 49
    expr8         go to state 50
    val_literal   go to state 51
    inc_or_dec    go to state 52
    mut           go to state 60
    array_access  go to state 54


state 70

   57 expr4: expr4 TOKEN_EQ . expr5

    TOKEN_PLUS            shift, and go to state 30
    TOKEN_LPAREN          shift, and go to state 31
    TOKEN_FALSE           shift, and go to state 32
    TOKEN_TRUE            shift, and go to state 33
    TOKEN_NEG             shift, and go to state 34
    TOKEN_NOT             shift, and go to state 35
    TOKEN_IDENT           shift, and go to state 36
    TOKEN_INT_LITERAL     shift, and go to state 37
    TOKEN_FLOAT_LITERAL   shift, and go to state 38
    TOKEN_STRING_LITERAL  shift, and go to state 39
    TOKEN_CHAR_LITERAL    shift, and go to state 40

    func_call     go to state 41
    expr5         go to state 97
    expr6         go to state 48
    expr7         go to state 49
    expr8         go to state 50
    val_literal   go to state 51
    inc_or_dec    go to state 52
    mut           go to state 60
    array_access  go to state 54


state 71

   58 expr4: expr4 TOKEN_NOT . TOKEN_EQ expr5

    TOKEN_EQ  shift, and go to state 98


state 72

   60 expr5: expr5 TOKEN_LT . expr6

    TOKEN_PLUS            shift, and go to state 30
    TOKEN_LPAREN          shift, and go to state 31
    TOKEN_FALSE           shift, and go to state 32
    TOKEN_TRUE            shift, and go to state 33
    TOKEN_NEG             shift, and go to state 34
    TOKEN_NOT             shift, and go to state 35
    TOKEN_IDENT           shift, and go to state 36
    TOKEN_INT_LITERAL     shift, and go to state 37
    TOKEN_FLOAT_LITERAL   shift, and go to state 38
    TOKEN_STRING_LITERAL  shift, and go to state 39
    TOKEN_CHAR_LITERAL    shift, and go to state 40

    func_call     go to state 41
    expr6         go to state 99
    expr7         go to state 49
    expr8         go to state 50
    val_literal   go to state 51
    inc_or_dec    go to state 52
    mut           go to state 60
    array_access  go to state 54


state 73

   61 expr5: expr5 TOKEN_GT . expr6

    TOKEN_PLUS            shift, and go to state 30
    TOKEN_LPAREN          shift, and go to state 31
    TOKEN_FALSE           shift, and go to state 32
    TOKEN_TRUE            shift, and go to state 33
    TOKEN_NEG             shift, and go to state 34
    TOKEN_NOT             shift, and go to state 35
    TOKEN_IDENT           shift, and go to state 36
    TOKEN_INT_LITERAL     shift, and go to state 37
    TOKEN_FLOAT_LITERAL   shift, and go to state 38
    TOKEN_STRING_LITERAL  shift, and go to state 39
    TOKEN_CHAR_LITERAL    shift, and go to state 40

    func_call     go to state 41
    expr6         go to state 100
    expr7         go to state 49
    expr8         go to state 50
    val_literal   go to state 51
    inc_or_dec    go to state 52
    mut           go to state 60
    array_access  go to state 54


state 74

   62 expr5: expr5 TOKEN_LEQ . expr6

    TOKEN_PLUS            shift, and go to state 30
    TOKEN_LPAREN          shift, and go to state 31
    TOKEN_FALSE           shift, and go to state 32
    TOKEN_TRUE            shift, and go to state 33
    TOKEN_NEG             shift, and go to state 34
    TOKEN_NOT             shift, and go to state 35
    TOKEN_IDENT           shift, and go to state 36
    TOKEN_INT_LITERAL     shift, and go to state 37
    TOKEN_FLOAT_LITERAL   shift, and go to state 38
    TOKEN_STRING_LITERAL  shift, and go to state 39
    TOKEN_CHAR_LITERAL    shift, and go to state 40

    func_call     go to state 41
    expr6         go to state 101
    expr7         go to state 49
    expr8         go to state 50
    val_literal   go to state 51
    inc_or_dec    go to state 52
    mut           go to state 60
    array_access  go to state 54


state 75

   63 expr5: expr5 TOKEN_GEQ . expr6

    TOKEN_PLUS            shift, and go to state 30
    TOKEN_LPAREN          shift, and go to state 31
    TOKEN_FALSE           shift, and go to state 32
    TOKEN_TRUE            shift, and go to state 33
    TOKEN_NEG             shift, and go to state 34
    TOKEN_NOT             shift, and go to state 35
    TOKEN_IDENT           shift, and go to state 36
    TOKEN_INT_LITERAL     shift, and go to state 37
    TOKEN_FLOAT_LITERAL   shift, and go to state 38
    TOKEN_STRING_LITERAL  shift, and go to state 39
    TOKEN_CHAR_LITERAL    shift, and go to state 40

    func_call     go to state 41
    expr6         go to state 102
    expr7         go to state 49
    expr8         go to state 50
    val_literal   go to state 51
    inc_or_dec    go to state 52
    mut           go to state 60
    array_access  go to state 54


state 76

   65 expr6: expr6 TOKEN_ADD . expr7

    TOKEN_PLUS            shift, and go to state 30
    TOKEN_LPAREN          shift, and go to state 31
    TOKEN_FALSE           shift, and go to state 32
    TOKEN_TRUE            shift, and go to state 33
    TOKEN_NEG             shift, and go to state 34
    TOKEN_NOT             shift, and go to state 35
    TOKEN_IDENT           shift, and go to state 36
    TOKEN_INT_LITERAL     shift, and go to state 37
    TOKEN_FLOAT_LITERAL   shift, and go to state 38
    TOKEN_STRING_LITERAL  shift, and go to state 39
    TOKEN_CHAR_LITERAL    shift, and go to state 40

    func_call     go to state 41
    expr7         go to state 103
    expr8         go to state 50
    val_literal   go to state 51
    inc_or_dec    go to state 52
    mut           go to state 60
    array_access  go to state 54


state 77

   66 expr6: expr6 TOKEN_NEG . expr7

    TOKEN_PLUS            shift, and go to state 30
    TOKEN_LPAREN          shift, and go to state 31
    TOKEN_FALSE           shift, and go to state 32
    TOKEN_TRUE            shift, and go to state 33
    TOKEN_NEG             shift, and go to state 34
    TOKEN_NOT             shift, and go to state 35
    TOKEN_IDENT           shift, and go to state 36
    TOKEN_INT_LITERAL     shift, and go to state 37
    TOKEN_FLOAT_LITERAL   shift, and go to state 38
    TOKEN_STRING_LITERAL  shift, and go to state 39
    TOKEN_CHAR_LITERAL    shift, and go to state 40

    func_call     go to state 41
    expr7         go to state 104
    expr8         go to state 50
    val_literal   go to state 51
    inc_or_dec    go to state 52
    mut           go to state 60
    array_access  go to state 54


state 78

   69 expr7: expr7 TOKEN_DIV . expr8

    TOKEN_PLUS            shift, and go to state 30
    TOKEN_LPAREN          shift, and go to state 31
    TOKEN_FALSE           shift, and go to state 32
    TOKEN_TRUE            shift, and go to state 33
    TOKEN_NEG             shift, and go to state 34
    TOKEN_NOT             shift, and go to state 35
    TOKEN_IDENT           shift, and go to state 36
    TOKEN_INT_LITERAL     shift, and go to state 37
    TOKEN_FLOAT_LITERAL   shift, and go to state 38
    TOKEN_STRING_LITERAL  shift, and go to state 39
    TOKEN_CHAR_LITERAL    shift, and go to state 40

    func_call     go to state 41
    expr8         go to state 105
    val_literal   go to state 51
    inc_or_dec    go to state 52
    mut           go to state 60
    array_access  go to state 54


state 79

   68 expr7: expr7 TOKEN_MULT . expr8

    TOKEN_PLUS            shift, and go to state 30
    TOKEN_LPAREN          shift, and go to state 31
    TOKEN_FALSE           shift, and go to state 32
    TOKEN_TRUE            shift, and go to state 33
    TOKEN_NEG             shift, and go to state 34
    TOKEN_NOT             shift, and go to state 35
    TOKEN_IDENT           shift, and go to state 36
    TOKEN_INT_LITERAL     shift, and go to state 37
    TOKEN_FLOAT_LITERAL   shift, and go to state 38
    TOKEN_STRING_LITERAL  shift, and go to state 39
    TOKEN_CHAR_LITERAL    shift, and go to state 40

    func_call     go to state 41
    expr8         go to state 106
    val_literal   go to state 51
    inc_or_dec    go to state 52
    mut           go to state 60
    array_access  go to state 54


state 80

   70 expr7: expr7 TOKEN_MOD . expr8

    TOKEN_PLUS            shift, and go to state 30
    TOKEN_LPAREN          shift, and go to state 31
    TOKEN_FALSE           shift, and go to state 32
    TOKEN_TRUE            shift, and go to state 33
    TOKEN_NEG             shift, and go to state 34
    TOKEN_NOT             shift, and go to state 35
    TOKEN_IDENT           shift, and go to state 36
    TOKEN_INT_LITERAL     shift, and go to state 37
    TOKEN_FLOAT_LITERAL   shift, and go to state 38
    TOKEN_STRING_LITERAL  shift, and go to state 39
    TOKEN_CHAR_LITERAL    shift, and go to state 40

    func_call     go to state 41
    expr8         go to state 107
    val_literal   go to state 51
    inc_or_dec    go to state 52
    mut           go to state 60
    array_access  go to state 54


state 81

   75 expr8: expr8 TOKEN_EXP . val_literal

    TOKEN_LPAREN          shift, and go to state 31
    TOKEN_FALSE           shift, and go to state 32
    TOKEN_TRUE            shift, and go to state 33
    TOKEN_IDENT           shift, and go to state 36
    TOKEN_INT_LITERAL     shift, and go to state 37
    TOKEN_FLOAT_LITERAL   shift, and go to state 38
    TOKEN_STRING_LITERAL  shift, and go to state 39
    TOKEN_CHAR_LITERAL    shift, and go to state 40

    func_call     go to state 41
    val_literal   go to state 108
    inc_or_dec    go to state 52
    mut           go to state 60
    array_access  go to state 54


state 82

   50 expr_assign: mut init . expr

    TOKEN_PLUS            shift, and go to state 30
    TOKEN_LPAREN          shift, and go to state 31
    TOKEN_FALSE           shift, and go to state 32
    TOKEN_TRUE            shift, and go to state 33
    TOKEN_NEG             shift, and go to state 34
    TOKEN_NOT             shift, and go to state 35
    TOKEN_IDENT           shift, and go to state 36
    TOKEN_INT_LITERAL     shift, and go to state 37
    TOKEN_FLOAT_LITERAL   shift, and go to state 38
    TOKEN_STRING_LITERAL  shift, and go to state 39
    TOKEN_CHAR_LITERAL    shift, and go to state 40

    func_call     go to state 41
    expr_assign   go to state 42
    expr          go to state 109
    expr2         go to state 44
    expr3         go to state 45
    expr4         go to state 46
    expr5         go to state 47
    expr6         go to state 48
    expr7         go to state 49
    expr8         go to state 50
    val_literal   go to state 51
    inc_or_dec    go to state 52
    mut           go to state 53
    array_access  go to state 54


state 83

   94 array_type: TOKEN_ARRAY TOKEN_LBRACKET array_size TOKEN_RBRACKET . all_types

    TOKEN_INT    shift, and go to state 12
    TOKEN_ARRAY  shift, and go to state 13
    TOKEN_BOOL   shift, and go to state 14
    TOKEN_CHAR   shift, and go to state 15
    TOKEN_FLOAT  shift, and go to state 16
    TOKEN_STR    shift, and go to state 18

    array_type  go to state 110
    all_types   go to state 111
    val_type    go to state 112


state 84

  106 param_list: TOKEN_IDENT . TOKEN_DEFINE all_types param_next

    TOKEN_DEFINE  shift, and go to state 113


state 85

   11 func_decl: TOKEN_IDENT TOKEN_DEFINE TOKEN_FUNC return_type TOKEN_LPAREN param_list . TOKEN_RPAREN TOKEN_SEMICOLON
   12          | TOKEN_IDENT TOKEN_DEFINE TOKEN_FUNC return_type TOKEN_LPAREN param_list . TOKEN_RPAREN init TOKEN_LBRACE stmt_list TOKEN_RBRACE

    TOKEN_RPAREN  shift, and go to state 114


state 86

   41 array_init: TOKEN_LBRACE . expr_list TOKEN_RBRACE array_init_next

    TOKEN_PLUS            shift, and go to state 30
    TOKEN_LPAREN          shift, and go to state 31
    TOKEN_FALSE           shift, and go to state 32
    TOKEN_TRUE            shift, and go to state 33
    TOKEN_NEG             shift, and go to state 34
    TOKEN_NOT             shift, and go to state 35
    TOKEN_IDENT           shift, and go to state 36
    TOKEN_INT_LITERAL     shift, and go to state 37
    TOKEN_FLOAT_LITERAL   shift, and go to state 38
    TOKEN_STRING_LITERAL  shift, and go to state 39
    TOKEN_CHAR_LITERAL    shift, and go to state 40

    func_call     go to state 41
    expr_list     go to state 115
    expr_assign   go to state 42
    expr          go to state 89
    expr2         go to state 44
    expr3         go to state 45
    expr4         go to state 46
    expr5         go to state 47
    expr6         go to state 48
    expr7         go to state 49
    expr8         go to state 50
    val_literal   go to state 51
    inc_or_dec    go to state 52
    mut           go to state 53
    array_access  go to state 54


state 87

    9 var_decl: TOKEN_IDENT TOKEN_DEFINE array_type init TOKEN_LBRACE array_init . TOKEN_RBRACE TOKEN_SEMICOLON

    TOKEN_RBRACE  shift, and go to state 116


state 88

   42 array_init: expr_list .

    $default  reduce using rule 42 (array_init)


state 89

   45 expr_list: expr . expr_next

    TOKEN_COMMA  shift, and go to state 117

    $default  reduce using rule 49 (expr_next)

    expr_next  go to state 118


state 90

    7 var_decl: TOKEN_IDENT TOKEN_DEFINE val_type init expr TOKEN_SEMICOLON .

    $default  reduce using rule 7 (var_decl)


state 91

   85 val_literal: TOKEN_LPAREN expr TOKEN_RPAREN .

    $default  reduce using rule 85 (val_literal)


state 92

   46 opt_expr_list: expr_list .

    $default  reduce using rule 46 (opt_expr_list)


state 93

   40 func_call: TOKEN_IDENT TOKEN_LPAREN opt_expr_list . TOKEN_RPAREN

    TOKEN_RPAREN  shift, and go to state 119


state 94

   91 array_access: TOKEN_IDENT TOKEN_LBRACKET expr . TOKEN_RBRACKET array_access_next

    TOKEN_RBRACKET  shift, and go to state 120


state 95

   53 expr2: expr2 TOKEN_OR expr3 .
   55 expr3: expr3 . TOKEN_AND expr4

    TOKEN_AND  shift, and go to state 69

    $default  reduce using rule 53 (expr2)


state 96

   55 expr3: expr3 TOKEN_AND expr4 .
   57 expr4: expr4 . TOKEN_EQ expr5
   58      | expr4 . TOKEN_NOT TOKEN_EQ expr5

    TOKEN_EQ   shift, and go to state 70
    TOKEN_NOT  shift, and go to state 71

    $default  reduce using rule 55 (expr3)


state 97

   57 expr4: expr4 TOKEN_EQ expr5 .
   60 expr5: expr5 . TOKEN_LT expr6
   61      | expr5 . TOKEN_GT expr6
   62      | expr5 . TOKEN_LEQ expr6
   63      | expr5 . TOKEN_GEQ expr6

    TOKEN_LT   shift, and go to state 72
    TOKEN_GT   shift, and go to state 73
    TOKEN_LEQ  shift, and go to state 74
    TOKEN_GEQ  shift, and go to state 75

    $default  reduce using rule 57 (expr4)


state 98

   58 expr4: expr4 TOKEN_NOT TOKEN_EQ . expr5

    TOKEN_PLUS            shift, and go to state 30
    TOKEN_LPAREN          shift, and go to state 31
    TOKEN_FALSE           shift, and go to state 32
    TOKEN_TRUE            shift, and go to state 33
    TOKEN_NEG             shift, and go to state 34
    TOKEN_NOT             shift, and go to state 35
    TOKEN_IDENT           shift, and go to state 36
    TOKEN_INT_LITERAL     shift, and go to state 37
    TOKEN_FLOAT_LITERAL   shift, and go to state 38
    TOKEN_STRING_LITERAL  shift, and go to state 39
    TOKEN_CHAR_LITERAL    shift, and go to state 40

    func_call     go to state 41
    expr5         go to state 121
    expr6         go to state 48
    expr7         go to state 49
    expr8         go to state 50
    val_literal   go to state 51
    inc_or_dec    go to state 52
    mut           go to state 60
    array_access  go to state 54


state 99

   60 expr5: expr5 TOKEN_LT expr6 .
   65 expr6: expr6 . TOKEN_ADD expr7
   66      | expr6 . TOKEN_NEG expr7

    TOKEN_ADD  shift, and go to state 76
    TOKEN_NEG  shift, and go to state 77

    $default  reduce using rule 60 (expr5)


state 100

   61 expr5: expr5 TOKEN_GT expr6 .
   65 expr6: expr6 . TOKEN_ADD expr7
   66      | expr6 . TOKEN_NEG expr7

    TOKEN_ADD  shift, and go to state 76
    TOKEN_NEG  shift, and go to state 77

    $default  reduce using rule 61 (expr5)


state 101

   62 expr5: expr5 TOKEN_LEQ expr6 .
   65 expr6: expr6 . TOKEN_ADD expr7
   66      | expr6 . TOKEN_NEG expr7

    TOKEN_ADD  shift, and go to state 76
    TOKEN_NEG  shift, and go to state 77

    $default  reduce using rule 62 (expr5)


state 102

   63 expr5: expr5 TOKEN_GEQ expr6 .
   65 expr6: expr6 . TOKEN_ADD expr7
   66      | expr6 . TOKEN_NEG expr7

    TOKEN_ADD  shift, and go to state 76
    TOKEN_NEG  shift, and go to state 77

    $default  reduce using rule 63 (expr5)


state 103

   65 expr6: expr6 TOKEN_ADD expr7 .
   68 expr7: expr7 . TOKEN_MULT expr8
   69      | expr7 . TOKEN_DIV expr8
   70      | expr7 . TOKEN_MOD expr8

    TOKEN_DIV   shift, and go to state 78
    TOKEN_MULT  shift, and go to state 79
    TOKEN_MOD   shift, and go to state 80

    $default  reduce using rule 65 (expr6)


state 104

   66 expr6: expr6 TOKEN_NEG expr7 .
   68 expr7: expr7 . TOKEN_MULT expr8
   69      | expr7 . TOKEN_DIV expr8
   70      | expr7 . TOKEN_MOD expr8

    TOKEN_DIV   shift, and go to state 78
    TOKEN_MULT  shift, and go to state 79
    TOKEN_MOD   shift, and go to state 80

    $default  reduce using rule 66 (expr6)


state 105

   69 expr7: expr7 TOKEN_DIV expr8 .
   75 expr8: expr8 . TOKEN_EXP val_literal

    TOKEN_EXP  shift, and go to state 81

    $default  reduce using rule 69 (expr7)


state 106

   68 expr7: expr7 TOKEN_MULT expr8 .
   75 expr8: expr8 . TOKEN_EXP val_literal

    TOKEN_EXP  shift, and go to state 81

    $default  reduce using rule 68 (expr7)


state 107

   70 expr7: expr7 TOKEN_MOD expr8 .
   75 expr8: expr8 . TOKEN_EXP val_literal

    TOKEN_EXP  shift, and go to state 81

    $default  reduce using rule 70 (expr7)


state 108

   75 expr8: expr8 TOKEN_EXP val_literal .

    $default  reduce using rule 75 (expr8)


state 109

   50 expr_assign: mut init expr .

    $default  reduce using rule 50 (expr_assign)


state 110

   98 all_types: array_type .

    $default  reduce using rule 98 (all_types)


state 111

   94 array_type: TOKEN_ARRAY TOKEN_LBRACKET array_size TOKEN_RBRACKET all_types .

    $default  reduce using rule 94 (array_type)


state 112

   97 all_types: val_type .

    $default  reduce using rule 97 (all_types)


state 113

  106 param_list: TOKEN_IDENT TOKEN_DEFINE . all_types param_next

    TOKEN_INT    shift, and go to state 12
    TOKEN_ARRAY  shift, and go to state 13
    TOKEN_BOOL   shift, and go to state 14
    TOKEN_CHAR   shift, and go to state 15
    TOKEN_FLOAT  shift, and go to state 16
    TOKEN_STR    shift, and go to state 18

    array_type  go to state 110
    all_types   go to state 122
    val_type    go to state 112


state 114

   11 func_decl: TOKEN_IDENT TOKEN_DEFINE TOKEN_FUNC return_type TOKEN_LPAREN param_list TOKEN_RPAREN . TOKEN_SEMICOLON
   12          | TOKEN_IDENT TOKEN_DEFINE TOKEN_FUNC return_type TOKEN_LPAREN param_list TOKEN_RPAREN . init TOKEN_LBRACE stmt_list TOKEN_RBRACE

    TOKEN_ASSIGN     shift, and go to state 25
    TOKEN_SEMICOLON  shift, and go to state 123

    init  go to state 124


state 115

   41 array_init: TOKEN_LBRACE expr_list . TOKEN_RBRACE array_init_next

    TOKEN_RBRACE  shift, and go to state 125


state 116

    9 var_decl: TOKEN_IDENT TOKEN_DEFINE array_type init TOKEN_LBRACE array_init TOKEN_RBRACE . TOKEN_SEMICOLON

    TOKEN_SEMICOLON  shift, and go to state 126


state 117

   48 expr_next: TOKEN_COMMA . expr_list

    TOKEN_PLUS            shift, and go to state 30
    TOKEN_LPAREN          shift, and go to state 31
    TOKEN_FALSE           shift, and go to state 32
    TOKEN_TRUE            shift, and go to state 33
    TOKEN_NEG             shift, and go to state 34
    TOKEN_NOT             shift, and go to state 35
    TOKEN_IDENT           shift, and go to state 36
    TOKEN_INT_LITERAL     shift, and go to state 37
    TOKEN_FLOAT_LITERAL   shift, and go to state 38
    TOKEN_STRING_LITERAL  shift, and go to state 39
    TOKEN_CHAR_LITERAL    shift, and go to state 40

    func_call     go to state 41
    expr_list     go to state 127
    expr_assign   go to state 42
    expr          go to state 89
    expr2         go to state 44
    expr3         go to state 45
    expr4         go to state 46
    expr5         go to state 47
    expr6         go to state 48
    expr7         go to state 49
    expr8         go to state 50
    val_literal   go to state 51
    inc_or_dec    go to state 52
    mut           go to state 53
    array_access  go to state 54


state 118

   45 expr_list: expr expr_next .

    $default  reduce using rule 45 (expr_list)


state 119

   40 func_call: TOKEN_IDENT TOKEN_LPAREN opt_expr_list TOKEN_RPAREN .

    $default  reduce using rule 40 (func_call)


state 120

   91 array_access: TOKEN_IDENT TOKEN_LBRACKET expr TOKEN_RBRACKET . array_access_next

    TOKEN_LBRACKET  shift, and go to state 128

    $default  reduce using rule 93 (array_access_next)

    array_access_next  go to state 129


state 121

   58 expr4: expr4 TOKEN_NOT TOKEN_EQ expr5 .
   60 expr5: expr5 . TOKEN_LT expr6
   61      | expr5 . TOKEN_GT expr6
   62      | expr5 . TOKEN_LEQ expr6
   63      | expr5 . TOKEN_GEQ expr6

    TOKEN_LT   shift, and go to state 72
    TOKEN_GT   shift, and go to state 73
    TOKEN_LEQ  shift, and go to state 74
    TOKEN_GEQ  shift, and go to state 75

    $default  reduce using rule 58 (expr4)


state 122

  106 param_list: TOKEN_IDENT TOKEN_DEFINE all_types . param_next

    TOKEN_COMMA  shift, and go to state 130

    $default  reduce using rule 109 (param_next)

    param_next  go to state 131


state 123

   11 func_decl: TOKEN_IDENT TOKEN_DEFINE TOKEN_FUNC return_type TOKEN_LPAREN param_list TOKEN_RPAREN TOKEN_SEMICOLON .

    $default  reduce using rule 11 (func_decl)


state 124

   12 func_decl: TOKEN_IDENT TOKEN_DEFINE TOKEN_FUNC return_type TOKEN_LPAREN param_list TOKEN_RPAREN init . TOKEN_LBRACE stmt_list TOKEN_RBRACE

    TOKEN_LBRACE  shift, and go to state 132


state 125

   41 array_init: TOKEN_LBRACE expr_list TOKEN_RBRACE . array_init_next

    TOKEN_COMMA  shift, and go to state 133

    $default  reduce using rule 44 (array_init_next)

    array_init_next  go to state 134


state 126

    9 var_decl: TOKEN_IDENT TOKEN_DEFINE array_type init TOKEN_LBRACE array_init TOKEN_RBRACE TOKEN_SEMICOLON .

    $default  reduce using rule 9 (var_decl)


state 127

   48 expr_next: TOKEN_COMMA expr_list .

    $default  reduce using rule 48 (expr_next)


state 128

   92 array_access_next: TOKEN_LBRACKET . expr TOKEN_RBRACKET array_access_next

    TOKEN_PLUS            shift, and go to state 30
    TOKEN_LPAREN          shift, and go to state 31
    TOKEN_FALSE           shift, and go to state 32
    TOKEN_TRUE            shift, and go to state 33
    TOKEN_NEG             shift, and go to state 34
    TOKEN_NOT             shift, and go to state 35
    TOKEN_IDENT           shift, and go to state 36
    TOKEN_INT_LITERAL     shift, and go to state 37
    TOKEN_FLOAT_LITERAL   shift, and go to state 38
    TOKEN_STRING_LITERAL  shift, and go to state 39
    TOKEN_CHAR_LITERAL    shift, and go to state 40

    func_call     go to state 41
    expr_assign   go to state 42
    expr          go to state 135
    expr2         go to state 44
    expr3         go to state 45
    expr4         go to state 46
    expr5         go to state 47
    expr6         go to state 48
    expr7         go to state 49
    expr8         go to state 50
    val_literal   go to state 51
    inc_or_dec    go to state 52
    mut           go to state 53
    array_access  go to state 54


state 129

   91 array_access: TOKEN_IDENT TOKEN_LBRACKET expr TOKEN_RBRACKET array_access_next .

    $default  reduce using rule 91 (array_access)


state 130

  108 param_next: TOKEN_COMMA . TOKEN_IDENT TOKEN_DEFINE all_types param_next

    TOKEN_IDENT  shift, and go to state 136


state 131

  106 param_list: TOKEN_IDENT TOKEN_DEFINE all_types param_next .

    $default  reduce using rule 106 (param_list)


state 132

   12 func_decl: TOKEN_IDENT TOKEN_DEFINE TOKEN_FUNC return_type TOKEN_LPAREN param_list TOKEN_RPAREN init TOKEN_LBRACE . stmt_list TOKEN_RBRACE

    $default  reduce using rule 14 (stmt_list)

    stmt_list  go to state 137


state 133

   43 array_init_next: TOKEN_COMMA . TOKEN_LBRACE expr_list TOKEN_RBRACE array_init_next

    TOKEN_LBRACE  shift, and go to state 138


state 134

   41 array_init: TOKEN_LBRACE expr_list TOKEN_RBRACE array_init_next .

    $default  reduce using rule 41 (array_init)


state 135

   92 array_access_next: TOKEN_LBRACKET expr . TOKEN_RBRACKET array_access_next

    TOKEN_RBRACKET  shift, and go to state 139


state 136

  108 param_next: TOKEN_COMMA TOKEN_IDENT . TOKEN_DEFINE all_types param_next

    TOKEN_DEFINE  shift, and go to state 140


state 137

   12 func_decl: TOKEN_IDENT TOKEN_DEFINE TOKEN_FUNC return_type TOKEN_LPAREN param_list TOKEN_RPAREN init TOKEN_LBRACE stmt_list . TOKEN_RBRACE
   13 stmt_list: stmt_list . stmt

    TOKEN_FOR     shift, and go to state 141
    TOKEN_IF      shift, and go to state 142
    TOKEN_PRINT   shift, and go to state 143
    TOKEN_RETURN  shift, and go to state 144
    TOKEN_LBRACE  shift, and go to state 145
    TOKEN_RBRACE  shift, and go to state 146
    TOKEN_IDENT   shift, and go to state 147

    var_decl      go to state 148
    stmt          go to state 149
    simp_stmt     go to state 150
    cmpd_stmt     go to state 151
    if_expr       go to state 152
    for_stmt      go to state 153
    func_call     go to state 154
    expr_assign   go to state 155
    inc_or_dec    go to state 156
    mut           go to state 157
    array_access  go to state 54


state 138

   43 array_init_next: TOKEN_COMMA TOKEN_LBRACE . expr_list TOKEN_RBRACE array_init_next

    TOKEN_PLUS            shift, and go to state 30
    TOKEN_LPAREN          shift, and go to state 31
    TOKEN_FALSE           shift, and go to state 32
    TOKEN_TRUE            shift, and go to state 33
    TOKEN_NEG             shift, and go to state 34
    TOKEN_NOT             shift, and go to state 35
    TOKEN_IDENT           shift, and go to state 36
    TOKEN_INT_LITERAL     shift, and go to state 37
    TOKEN_FLOAT_LITERAL   shift, and go to state 38
    TOKEN_STRING_LITERAL  shift, and go to state 39
    TOKEN_CHAR_LITERAL    shift, and go to state 40

    func_call     go to state 41
    expr_list     go to state 158
    expr_assign   go to state 42
    expr          go to state 89
    expr2         go to state 44
    expr3         go to state 45
    expr4         go to state 46
    expr5         go to state 47
    expr6         go to state 48
    expr7         go to state 49
    expr8         go to state 50
    val_literal   go to state 51
    inc_or_dec    go to state 52
    mut           go to state 53
    array_access  go to state 54


state 139

   92 array_access_next: TOKEN_LBRACKET expr TOKEN_RBRACKET . array_access_next

    TOKEN_LBRACKET  shift, and go to state 128

    $default  reduce using rule 93 (array_access_next)

    array_access_next  go to state 159


state 140

  108 param_next: TOKEN_COMMA TOKEN_IDENT TOKEN_DEFINE . all_types param_next

    TOKEN_INT    shift, and go to state 12
    TOKEN_ARRAY  shift, and go to state 13
    TOKEN_BOOL   shift, and go to state 14
    TOKEN_CHAR   shift, and go to state 15
    TOKEN_FLOAT  shift, and go to state 16
    TOKEN_STR    shift, and go to state 18

    array_type  go to state 110
    all_types   go to state 160
    val_type    go to state 112


state 141

   32 for_stmt: TOKEN_FOR . for_cond

    TOKEN_LPAREN  shift, and go to state 161

    for_cond  go to state 162


state 142

   31 if_expr: TOKEN_IF . TOKEN_LPAREN expr TOKEN_RPAREN

    TOKEN_LPAREN  shift, and go to state 163


state 143

   21 simp_stmt: TOKEN_PRINT . opt_expr_list TOKEN_SEMICOLON

    TOKEN_PLUS            shift, and go to state 30
    TOKEN_LPAREN          shift, and go to state 31
    TOKEN_FALSE           shift, and go to state 32
    TOKEN_TRUE            shift, and go to state 33
    TOKEN_NEG             shift, and go to state 34
    TOKEN_NOT             shift, and go to state 35
    TOKEN_IDENT           shift, and go to state 36
    TOKEN_INT_LITERAL     shift, and go to state 37
    TOKEN_FLOAT_LITERAL   shift, and go to state 38
    TOKEN_STRING_LITERAL  shift, and go to state 39
    TOKEN_CHAR_LITERAL    shift, and go to state 40

    $default  reduce using rule 47 (opt_expr_list)

    func_call      go to state 41
    expr_list      go to state 92
    opt_expr_list  go to state 164
    expr_assign    go to state 42
    expr           go to state 89
    expr2          go to state 44
    expr3          go to state 45
    expr4          go to state 46
    expr5          go to state 47
    expr6          go to state 48
    expr7          go to state 49
    expr8          go to state 50
    val_literal    go to state 51
    inc_or_dec     go to state 52
    mut            go to state 53
    array_access   go to state 54


state 144

   19 simp_stmt: TOKEN_RETURN . expr TOKEN_SEMICOLON
   20          | TOKEN_RETURN . TOKEN_SEMICOLON

    TOKEN_PLUS            shift, and go to state 30
    TOKEN_LPAREN          shift, and go to state 31
    TOKEN_FALSE           shift, and go to state 32
    TOKEN_TRUE            shift, and go to state 33
    TOKEN_NEG             shift, and go to state 34
    TOKEN_NOT             shift, and go to state 35
    TOKEN_SEMICOLON       shift, and go to state 165
    TOKEN_IDENT           shift, and go to state 36
    TOKEN_INT_LITERAL     shift, and go to state 37
    TOKEN_FLOAT_LITERAL   shift, and go to state 38
    TOKEN_STRING_LITERAL  shift, and go to state 39
    TOKEN_CHAR_LITERAL    shift, and go to state 40

    func_call     go to state 41
    expr_assign   go to state 42
    expr          go to state 166
    expr2         go to state 44
    expr3         go to state 45
    expr4         go to state 46
    expr5         go to state 47
    expr6         go to state 48
    expr7         go to state 49
    expr8         go to state 50
    val_literal   go to state 51
    inc_or_dec    go to state 52
    mut           go to state 53
    array_access  go to state 54


state 145

   17 simp_stmt: TOKEN_LBRACE . stmt_list TOKEN_RBRACE

    $default  reduce using rule 14 (stmt_list)

    stmt_list  go to state 167


state 146

   12 func_decl: TOKEN_IDENT TOKEN_DEFINE TOKEN_FUNC return_type TOKEN_LPAREN param_list TOKEN_RPAREN init TOKEN_LBRACE stmt_list TOKEN_RBRACE .

    $default  reduce using rule 12 (func_decl)


state 147

    7 var_decl: TOKEN_IDENT . TOKEN_DEFINE val_type init expr TOKEN_SEMICOLON
    8         | TOKEN_IDENT . TOKEN_DEFINE val_type TOKEN_SEMICOLON
    9         | TOKEN_IDENT . TOKEN_DEFINE array_type init TOKEN_LBRACE array_init TOKEN_RBRACE TOKEN_SEMICOLON
   10         | TOKEN_IDENT . TOKEN_DEFINE array_type TOKEN_SEMICOLON
   40 func_call: TOKEN_IDENT . TOKEN_LPAREN opt_expr_list TOKEN_RPAREN
   87 inc_or_dec: TOKEN_IDENT . TOKEN_INC
   88           | TOKEN_IDENT . TOKEN_DEC
   89 mut: TOKEN_IDENT .
   91 array_access: TOKEN_IDENT . TOKEN_LBRACKET expr TOKEN_RBRACKET array_access_next

    TOKEN_LPAREN    shift, and go to state 64
    TOKEN_LBRACKET  shift, and go to state 65
    TOKEN_INC       shift, and go to state 66
    TOKEN_DEC       shift, and go to state 67
    TOKEN_DEFINE    shift, and go to state 168

    $default  reduce using rule 89 (mut)


state 148

   18 simp_stmt: var_decl .

    $default  reduce using rule 18 (simp_stmt)


state 149

   13 stmt_list: stmt_list stmt .

    $default  reduce using rule 13 (stmt_list)


state 150

   15 stmt: simp_stmt .

    $default  reduce using rule 15 (stmt)


state 151

   16 stmt: cmpd_stmt .

    $default  reduce using rule 16 (stmt)


state 152

   25 cmpd_stmt: if_expr . stmt
   26          | if_expr . if_dangle TOKEN_ELSE stmt

    TOKEN_FOR     shift, and go to state 141
    TOKEN_IF      shift, and go to state 142
    TOKEN_PRINT   shift, and go to state 143
    TOKEN_RETURN  shift, and go to state 144
    TOKEN_LBRACE  shift, and go to state 145
    TOKEN_IDENT   shift, and go to state 147

    var_decl      go to state 148
    stmt          go to state 169
    simp_stmt     go to state 170
    cmpd_stmt     go to state 151
    if_dangle     go to state 171
    if_expr       go to state 172
    for_stmt      go to state 173
    func_call     go to state 154
    expr_assign   go to state 155
    inc_or_dec    go to state 156
    mut           go to state 157
    array_access  go to state 54


state 153

   27 cmpd_stmt: for_stmt . reg_end

    TOKEN_FOR        shift, and go to state 141
    TOKEN_IF         shift, and go to state 142
    TOKEN_PRINT      shift, and go to state 143
    TOKEN_RETURN     shift, and go to state 144
    TOKEN_LBRACE     shift, and go to state 145
    TOKEN_SEMICOLON  shift, and go to state 174
    TOKEN_IDENT      shift, and go to state 147

    var_decl      go to state 148
    stmt          go to state 175
    simp_stmt     go to state 150
    cmpd_stmt     go to state 151
    if_expr       go to state 152
    for_stmt      go to state 153
    reg_end       go to state 176
    func_call     go to state 154
    expr_assign   go to state 155
    inc_or_dec    go to state 156
    mut           go to state 157
    array_access  go to state 54


state 154

   24 simp_stmt: func_call . TOKEN_SEMICOLON

    TOKEN_SEMICOLON  shift, and go to state 177


state 155

   23 simp_stmt: expr_assign . TOKEN_SEMICOLON

    TOKEN_SEMICOLON  shift, and go to state 178


state 156

   22 simp_stmt: inc_or_dec . TOKEN_SEMICOLON

    TOKEN_SEMICOLON  shift, and go to state 179


state 157

   50 expr_assign: mut . init expr

    TOKEN_ASSIGN  shift, and go to state 25

    init  go to state 82


state 158

   43 array_init_next: TOKEN_COMMA TOKEN_LBRACE expr_list . TOKEN_RBRACE array_init_next

    TOKEN_RBRACE  shift, and go to state 180


state 159

   92 array_access_next: TOKEN_LBRACKET expr TOKEN_RBRACKET array_access_next .

    $default  reduce using rule 92 (array_access_next)


state 160

  108 param_next: TOKEN_COMMA TOKEN_IDENT TOKEN_DEFINE all_types . param_next

    TOKEN_COMMA  shift, and go to state 130

    $default  reduce using rule 109 (param_next)

    param_next  go to state 181


state 161

   33 for_cond: TOKEN_LPAREN . for_expr TOKEN_SEMICOLON for_expr TOKEN_SEMICOLON for_expr TOKEN_RPAREN

    TOKEN_PLUS            shift, and go to state 30
    TOKEN_LPAREN          shift, and go to state 31
    TOKEN_FALSE           shift, and go to state 32
    TOKEN_TRUE            shift, and go to state 33
    TOKEN_NEG             shift, and go to state 34
    TOKEN_NOT             shift, and go to state 35
    TOKEN_IDENT           shift, and go to state 36
    TOKEN_INT_LITERAL     shift, and go to state 37
    TOKEN_FLOAT_LITERAL   shift, and go to state 38
    TOKEN_STRING_LITERAL  shift, and go to state 39
    TOKEN_CHAR_LITERAL    shift, and go to state 40

    $default  reduce using rule 35 (for_expr)

    for_expr      go to state 182
    func_call     go to state 41
    expr_assign   go to state 42
    expr          go to state 183
    expr2         go to state 44
    expr3         go to state 45
    expr4         go to state 46
    expr5         go to state 47
    expr6         go to state 48
    expr7         go to state 49
    expr8         go to state 50
    val_literal   go to state 51
    inc_or_dec    go to state 52
    mut           go to state 53
    array_access  go to state 54


state 162

   32 for_stmt: TOKEN_FOR for_cond .

    $default  reduce using rule 32 (for_stmt)


state 163

   31 if_expr: TOKEN_IF TOKEN_LPAREN . expr TOKEN_RPAREN

    TOKEN_PLUS            shift, and go to state 30
    TOKEN_LPAREN          shift, and go to state 31
    TOKEN_FALSE           shift, and go to state 32
    TOKEN_TRUE            shift, and go to state 33
    TOKEN_NEG             shift, and go to state 34
    TOKEN_NOT             shift, and go to state 35
    TOKEN_IDENT           shift, and go to state 36
    TOKEN_INT_LITERAL     shift, and go to state 37
    TOKEN_FLOAT_LITERAL   shift, and go to state 38
    TOKEN_STRING_LITERAL  shift, and go to state 39
    TOKEN_CHAR_LITERAL    shift, and go to state 40

    func_call     go to state 41
    expr_assign   go to state 42
    expr          go to state 184
    expr2         go to state 44
    expr3         go to state 45
    expr4         go to state 46
    expr5         go to state 47
    expr6         go to state 48
    expr7         go to state 49
    expr8         go to state 50
    val_literal   go to state 51
    inc_or_dec    go to state 52
    mut           go to state 53
    array_access  go to state 54


state 164

   21 simp_stmt: TOKEN_PRINT opt_expr_list . TOKEN_SEMICOLON

    TOKEN_SEMICOLON  shift, and go to state 185


state 165

   20 simp_stmt: TOKEN_RETURN TOKEN_SEMICOLON .

    $default  reduce using rule 20 (simp_stmt)


state 166

   19 simp_stmt: TOKEN_RETURN expr . TOKEN_SEMICOLON

    TOKEN_SEMICOLON  shift, and go to state 186


state 167

   13 stmt_list: stmt_list . stmt
   17 simp_stmt: TOKEN_LBRACE stmt_list . TOKEN_RBRACE

    TOKEN_FOR     shift, and go to state 141
    TOKEN_IF      shift, and go to state 142
    TOKEN_PRINT   shift, and go to state 143
    TOKEN_RETURN  shift, and go to state 144
    TOKEN_LBRACE  shift, and go to state 145
    TOKEN_RBRACE  shift, and go to state 187
    TOKEN_IDENT   shift, and go to state 147

    var_decl      go to state 148
    stmt          go to state 149
    simp_stmt     go to state 150
    cmpd_stmt     go to state 151
    if_expr       go to state 152
    for_stmt      go to state 153
    func_call     go to state 154
    expr_assign   go to state 155
    inc_or_dec    go to state 156
    mut           go to state 157
    array_access  go to state 54


state 168

    7 var_decl: TOKEN_IDENT TOKEN_DEFINE . val_type init expr TOKEN_SEMICOLON
    8         | TOKEN_IDENT TOKEN_DEFINE . val_type TOKEN_SEMICOLON
    9         | TOKEN_IDENT TOKEN_DEFINE . array_type init TOKEN_LBRACE array_init TOKEN_RBRACE TOKEN_SEMICOLON
   10         | TOKEN_IDENT TOKEN_DEFINE . array_type TOKEN_SEMICOLON

    TOKEN_INT    shift, and go to state 12
    TOKEN_ARRAY  shift, and go to state 13
    TOKEN_BOOL   shift, and go to state 14
    TOKEN_CHAR   shift, and go to state 15
    TOKEN_FLOAT  shift, and go to state 16
    TOKEN_STR    shift, and go to state 18

    array_type  go to state 19
    val_type    go to state 20


state 169

   25 cmpd_stmt: if_expr stmt .

    $default  reduce using rule 25 (cmpd_stmt)


state 170

   15 stmt: simp_stmt .
   30 if_dangle: simp_stmt .

    TOKEN_ELSE  reduce using rule 30 (if_dangle)
    $default    reduce using rule 15 (stmt)


state 171

   26 cmpd_stmt: if_expr if_dangle . TOKEN_ELSE stmt

    TOKEN_ELSE  shift, and go to state 188


state 172

   25 cmpd_stmt: if_expr . stmt
   26          | if_expr . if_dangle TOKEN_ELSE stmt
   28 if_dangle: if_expr . if_dangle TOKEN_ELSE if_dangle

    TOKEN_FOR     shift, and go to state 141
    TOKEN_IF      shift, and go to state 142
    TOKEN_PRINT   shift, and go to state 143
    TOKEN_RETURN  shift, and go to state 144
    TOKEN_LBRACE  shift, and go to state 145
    TOKEN_IDENT   shift, and go to state 147

    var_decl      go to state 148
    stmt          go to state 169
    simp_stmt     go to state 170
    cmpd_stmt     go to state 151
    if_dangle     go to state 189
    if_expr       go to state 172
    for_stmt      go to state 173
    func_call     go to state 154
    expr_assign   go to state 155
    inc_or_dec    go to state 156
    mut           go to state 157
    array_access  go to state 54


state 173

   27 cmpd_stmt: for_stmt . reg_end
   29 if_dangle: for_stmt . dangle_end

    TOKEN_FOR        shift, and go to state 141
    TOKEN_IF         shift, and go to state 142
    TOKEN_PRINT      shift, and go to state 143
    TOKEN_RETURN     shift, and go to state 144
    TOKEN_LBRACE     shift, and go to state 145
    TOKEN_SEMICOLON  shift, and go to state 190
    TOKEN_IDENT      shift, and go to state 147

    var_decl      go to state 148
    stmt          go to state 175
    simp_stmt     go to state 170
    cmpd_stmt     go to state 151
    if_dangle     go to state 191
    if_expr       go to state 172
    for_stmt      go to state 173
    dangle_end    go to state 192
    reg_end       go to state 176
    func_call     go to state 154
    expr_assign   go to state 155
    inc_or_dec    go to state 156
    mut           go to state 157
    array_access  go to state 54


state 174

   38 reg_end: TOKEN_SEMICOLON .

    $default  reduce using rule 38 (reg_end)


state 175

   39 reg_end: stmt .

    $default  reduce using rule 39 (reg_end)


state 176

   27 cmpd_stmt: for_stmt reg_end .

    $default  reduce using rule 27 (cmpd_stmt)


state 177

   24 simp_stmt: func_call TOKEN_SEMICOLON .

    $default  reduce using rule 24 (simp_stmt)


state 178

   23 simp_stmt: expr_assign TOKEN_SEMICOLON .

    $default  reduce using rule 23 (simp_stmt)


state 179

   22 simp_stmt: inc_or_dec TOKEN_SEMICOLON .

    $default  reduce using rule 22 (simp_stmt)


state 180

   43 array_init_next: TOKEN_COMMA TOKEN_LBRACE expr_list TOKEN_RBRACE . array_init_next

    TOKEN_COMMA  shift, and go to state 133

    $default  reduce using rule 44 (array_init_next)

    array_init_next  go to state 193


state 181

  108 param_next: TOKEN_COMMA TOKEN_IDENT TOKEN_DEFINE all_types param_next .

    $default  reduce using rule 108 (param_next)


state 182

   33 for_cond: TOKEN_LPAREN for_expr . TOKEN_SEMICOLON for_expr TOKEN_SEMICOLON for_expr TOKEN_RPAREN

    TOKEN_SEMICOLON  shift, and go to state 194


state 183

   34 for_expr: expr .

    $default  reduce using rule 34 (for_expr)


state 184

   31 if_expr: TOKEN_IF TOKEN_LPAREN expr . TOKEN_RPAREN

    TOKEN_RPAREN  shift, and go to state 195


state 185

   21 simp_stmt: TOKEN_PRINT opt_expr_list TOKEN_SEMICOLON .

    $default  reduce using rule 21 (simp_stmt)


state 186

   19 simp_stmt: TOKEN_RETURN expr TOKEN_SEMICOLON .

    $default  reduce using rule 19 (simp_stmt)


state 187

   17 simp_stmt: TOKEN_LBRACE stmt_list TOKEN_RBRACE .

    $default  reduce using rule 17 (simp_stmt)


state 188

   26 cmpd_stmt: if_expr if_dangle TOKEN_ELSE . stmt

    TOKEN_FOR     shift, and go to state 141
    TOKEN_IF      shift, and go to state 142
    TOKEN_PRINT   shift, and go to state 143
    TOKEN_RETURN  shift, and go to state 144
    TOKEN_LBRACE  shift, and go to state 145
    TOKEN_IDENT   shift, and go to state 147

    var_decl      go to state 148
    stmt          go to state 196
    simp_stmt     go to state 150
    cmpd_stmt     go to state 151
    if_expr       go to state 152
    for_stmt      go to state 153
    func_call     go to state 154
    expr_assign   go to state 155
    inc_or_dec    go to state 156
    mut           go to state 157
    array_access  go to state 54


state 189

   26 cmpd_stmt: if_expr if_dangle . TOKEN_ELSE stmt
   28 if_dangle: if_expr if_dangle . TOKEN_ELSE if_dangle

    TOKEN_ELSE  shift, and go to state 197


state 190

   36 dangle_end: TOKEN_SEMICOLON .
   38 reg_end: TOKEN_SEMICOLON .

    TOKEN_ELSE  reduce using rule 36 (dangle_end)
    $default    reduce using rule 38 (reg_end)


state 191

   37 dangle_end: if_dangle .

    $default  reduce using rule 37 (dangle_end)


state 192

   29 if_dangle: for_stmt dangle_end .

    $default  reduce using rule 29 (if_dangle)


state 193

   43 array_init_next: TOKEN_COMMA TOKEN_LBRACE expr_list TOKEN_RBRACE array_init_next .

    $default  reduce using rule 43 (array_init_next)


state 194

   33 for_cond: TOKEN_LPAREN for_expr TOKEN_SEMICOLON . for_expr TOKEN_SEMICOLON for_expr TOKEN_RPAREN

    TOKEN_PLUS            shift, and go to state 30
    TOKEN_LPAREN          shift, and go to state 31
    TOKEN_FALSE           shift, and go to state 32
    TOKEN_TRUE            shift, and go to state 33
    TOKEN_NEG             shift, and go to state 34
    TOKEN_NOT             shift, and go to state 35
    TOKEN_IDENT           shift, and go to state 36
    TOKEN_INT_LITERAL     shift, and go to state 37
    TOKEN_FLOAT_LITERAL   shift, and go to state 38
    TOKEN_STRING_LITERAL  shift, and go to state 39
    TOKEN_CHAR_LITERAL    shift, and go to state 40

    $default  reduce using rule 35 (for_expr)

    for_expr      go to state 198
    func_call     go to state 41
    expr_assign   go to state 42
    expr          go to state 183
    expr2         go to state 44
    expr3         go to state 45
    expr4         go to state 46
    expr5         go to state 47
    expr6         go to state 48
    expr7         go to state 49
    expr8         go to state 50
    val_literal   go to state 51
    inc_or_dec    go to state 52
    mut           go to state 53
    array_access  go to state 54


state 195

   31 if_expr: TOKEN_IF TOKEN_LPAREN expr TOKEN_RPAREN .

    $default  reduce using rule 31 (if_expr)


state 196

   26 cmpd_stmt: if_expr if_dangle TOKEN_ELSE stmt .

    $default  reduce using rule 26 (cmpd_stmt)


state 197

   26 cmpd_stmt: if_expr if_dangle TOKEN_ELSE . stmt
   28 if_dangle: if_expr if_dangle TOKEN_ELSE . if_dangle

    TOKEN_FOR     shift, and go to state 141
    TOKEN_IF      shift, and go to state 142
    TOKEN_PRINT   shift, and go to state 143
    TOKEN_RETURN  shift, and go to state 144
    TOKEN_LBRACE  shift, and go to state 145
    TOKEN_IDENT   shift, and go to state 147

    var_decl      go to state 148
    stmt          go to state 196
    simp_stmt     go to state 170
    cmpd_stmt     go to state 151
    if_dangle     go to state 199
    if_expr       go to state 172
    for_stmt      go to state 173
    func_call     go to state 154
    expr_assign   go to state 155
    inc_or_dec    go to state 156
    mut           go to state 157
    array_access  go to state 54


state 198

   33 for_cond: TOKEN_LPAREN for_expr TOKEN_SEMICOLON for_expr . TOKEN_SEMICOLON for_expr TOKEN_RPAREN

    TOKEN_SEMICOLON  shift, and go to state 200


state 199

   28 if_dangle: if_expr if_dangle TOKEN_ELSE if_dangle .

    $default  reduce using rule 28 (if_dangle)


state 200

   33 for_cond: TOKEN_LPAREN for_expr TOKEN_SEMICOLON for_expr TOKEN_SEMICOLON . for_expr TOKEN_RPAREN

    TOKEN_PLUS            shift, and go to state 30
    TOKEN_LPAREN          shift, and go to state 31
    TOKEN_FALSE           shift, and go to state 32
    TOKEN_TRUE            shift, and go to state 33
    TOKEN_NEG             shift, and go to state 34
    TOKEN_NOT             shift, and go to state 35
    TOKEN_IDENT           shift, and go to state 36
    TOKEN_INT_LITERAL     shift, and go to state 37
    TOKEN_FLOAT_LITERAL   shift, and go to state 38
    TOKEN_STRING_LITERAL  shift, and go to state 39
    TOKEN_CHAR_LITERAL    shift, and go to state 40

    $default  reduce using rule 35 (for_expr)

    for_expr      go to state 201
    func_call     go to state 41
    expr_assign   go to state 42
    expr          go to state 183
    expr2         go to state 44
    expr3         go to state 45
    expr4         go to state 46
    expr5         go to state 47
    expr6         go to state 48
    expr7         go to state 49
    expr8         go to state 50
    val_literal   go to state 51
    inc_or_dec    go to state 52
    mut           go to state 53
    array_access  go to state 54


state 201

   33 for_cond: TOKEN_LPAREN for_expr TOKEN_SEMICOLON for_expr TOKEN_SEMICOLON for_expr . TOKEN_RPAREN

    TOKEN_RPAREN  shift, and go to state 202


state 202

   33 for_cond: TOKEN_LPAREN for_expr TOKEN_SEMICOLON for_expr TOKEN_SEMICOLON for_expr TOKEN_RPAREN .

    $default  reduce using rule 33 (for_cond)
